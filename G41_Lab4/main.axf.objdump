
P:/G41_Lab4/main.axf:     file format elf32-littlearm


Disassembly of section .vectors:

00000000 <__cs3_interrupt_vector>:
   0:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  10:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  20:	40 00 00 00 cc 0a 00 00 d0 0a 00 00 d4 0a 00 00     @...............
  30:	d8 0a 00 00 c8 0a 00 00 dc 0a 00 00 e0 0a 00 00     ................

Disassembly of section .text:

00000040 <__cs3_reset>:
  40:	ea000026 	b	e0 <__cs3_start_asm_sim>

00000044 <__cs3_start_c>:
  44:	e59f608c 	ldr	r6, [pc, #140]	; d8 <__cs3_start_c+0x94>
  48:	e3560000 	cmp	r6, #0
  4c:	e92d4080 	push	{r7, lr}
  50:	e2466001 	sub	r6, r6, #1
  54:	0a00001e 	beq	d4 <__cs3_start_c+0x90>
  58:	e59f507c 	ldr	r5, [pc, #124]	; dc <__cs3_start_c+0x98>
  5c:	e3a00000 	mov	r0, #0
  60:	e3a01000 	mov	r1, #0
  64:	e515200c 	ldr	r2, [r5, #-12]
  68:	e515e010 	ldr	lr, [r5, #-16]
  6c:	e5154008 	ldr	r4, [r5, #-8]
  70:	e15e0002 	cmp	lr, r2
  74:	00822004 	addeq	r2, r2, r4
  78:	0a000009 	beq	a4 <__cs3_start_c+0x60>
  7c:	e3540000 	cmp	r4, #0
  80:	0a000007 	beq	a4 <__cs3_start_c+0x60>
  84:	e1a07002 	mov	r7, r2
  88:	e1a0c002 	mov	r12, r2
  8c:	e8be000c 	ldm	lr!, {r2, r3}
  90:	e8ac000c 	stmia	r12!, {r2, r3}
  94:	e067300c 	rsb	r3, r7, r12
  98:	e1540003 	cmp	r4, r3
  9c:	e1a0200c 	mov	r2, r12
  a0:	1afffff9 	bne	8c <__cs3_start_c+0x48>
  a4:	e515e004 	ldr	lr, [r5, #-4]
  a8:	e35e0000 	cmp	lr, #0
  ac:	11a03002 	movne	r3, r2
  b0:	0a000003 	beq	c4 <__cs3_start_c+0x80>
  b4:	e8a30003 	stmia	r3!, {r0, r1}
  b8:	e062c003 	rsb	r12, r2, r3
  bc:	e15e000c 	cmp	lr, r12
  c0:	1afffffb 	bne	b4 <__cs3_start_c+0x70>
  c4:	e2466001 	sub	r6, r6, #1
  c8:	e3760001 	cmn	r6, #1
  cc:	e2855014 	add	r5, r5, #20
  d0:	1affffe3 	bne	64 <__cs3_start_c+0x20>
  d4:	eb000262 	bl	a64 <__cs3_premain>
  d8:	00000001 	.word	0x00000001
  dc:	00000bc8 	.word	0x00000bc8

000000e0 <__cs3_start_asm_sim>:
  e0:	e28f103c 	add	r1, pc, #60	; 0x3c
  e4:	e3a00016 	mov	r0, #22
  e8:	ef123456 	svc	0x00123456
  ec:	e3500000 	cmp	r0, #0
  f0:	ba000008 	blt	118 <__cs3_start_asm_sim+0x38>
  f4:	e59f2028 	ldr	r2, [pc, #40]	; 124 <__cs3_heap_start_ptr>
  f8:	e59fd01c 	ldr	sp, [pc, #28]	; 11c <__cs3_start_asm_sim+0x3c>
  fc:	e5920008 	ldr	r0, [r2, #8]
 100:	e3500000 	cmp	r0, #0
 104:	11a0d000 	movne	sp, r0
 108:	e59f1010 	ldr	r1, [pc, #16]	; 120 <__cs3_start_asm_sim+0x40>
 10c:	e5920004 	ldr	r0, [r2, #4]
 110:	e3500000 	cmp	r0, #0
 114:	15810000 	strne	r0, [r1]
 118:	eaffffc9 	b	44 <__cs3_start_c>
 11c:	3ffffff8 	.word	0x3ffffff8
 120:	00001000 	.word	0x00001000

00000124 <__cs3_heap_start_ptr>:
 124:	00001028 	.word	0x00001028

00000128 <_start>:
 128:	e51fd000 	ldr	sp, [pc, #-0]	; 130 <_start+0x8>
 12c:	eaffffc4 	b	44 <__cs3_start_c>
 130:	3ffffff8 	.word	0x3ffffff8

00000134 <deregister_tm_clones>:
 134:	e92d4008 	push	{r3, lr}
 138:	e59f002c 	ldr	r0, [pc, #44]	; 16c <deregister_tm_clones+0x38>
 13c:	e59f302c 	ldr	r3, [pc, #44]	; 170 <deregister_tm_clones+0x3c>
 140:	e0603003 	rsb	r3, r0, r3
 144:	e3530006 	cmp	r3, #6
 148:	8a000001 	bhi	154 <deregister_tm_clones+0x20>
 14c:	e8bd4008 	pop	{r3, lr}
 150:	e12fff1e 	bx	lr
 154:	e59f3018 	ldr	r3, [pc, #24]	; 174 <deregister_tm_clones+0x40>
 158:	e3530000 	cmp	r3, #0
 15c:	0afffffa 	beq	14c <deregister_tm_clones+0x18>
 160:	e1a0e00f 	mov	lr, pc
 164:	e12fff13 	bx	r3
 168:	eafffff7 	b	14c <deregister_tm_clones+0x18>
 16c:	00001008 	.word	0x00001008
 170:	0000100b 	.word	0x0000100b
 174:	00000000 	.word	0x00000000

00000178 <register_tm_clones>:
 178:	e92d4008 	push	{r3, lr}
 17c:	e59f0034 	ldr	r0, [pc, #52]	; 1b8 <register_tm_clones+0x40>
 180:	e59f3034 	ldr	r3, [pc, #52]	; 1bc <register_tm_clones+0x44>
 184:	e0603003 	rsb	r3, r0, r3
 188:	e1a03143 	asr	r3, r3, #2
 18c:	e0833fa3 	add	r3, r3, r3, lsr #31
 190:	e1b010c3 	asrs	r1, r3, #1
 194:	1a000001 	bne	1a0 <register_tm_clones+0x28>
 198:	e8bd4008 	pop	{r3, lr}
 19c:	e12fff1e 	bx	lr
 1a0:	e59f2018 	ldr	r2, [pc, #24]	; 1c0 <register_tm_clones+0x48>
 1a4:	e3520000 	cmp	r2, #0
 1a8:	0afffffa 	beq	198 <register_tm_clones+0x20>
 1ac:	e1a0e00f 	mov	lr, pc
 1b0:	e12fff12 	bx	r2
 1b4:	eafffff7 	b	198 <register_tm_clones+0x20>
 1b8:	00001008 	.word	0x00001008
 1bc:	00001008 	.word	0x00001008
 1c0:	00000000 	.word	0x00000000

000001c4 <__do_global_dtors_aux>:
 1c4:	e92d4010 	push	{r4, lr}
 1c8:	e59f402c 	ldr	r4, [pc, #44]	; 1fc <__do_global_dtors_aux+0x38>
 1cc:	e5d43000 	ldrb	r3, [r4]
 1d0:	e3530000 	cmp	r3, #0
 1d4:	1a000006 	bne	1f4 <__do_global_dtors_aux+0x30>
 1d8:	ebffffd5 	bl	134 <deregister_tm_clones>
 1dc:	e59f301c 	ldr	r3, [pc, #28]	; 200 <__do_global_dtors_aux+0x3c>
 1e0:	e3530000 	cmp	r3, #0
 1e4:	159f0018 	ldrne	r0, [pc, #24]	; 204 <__do_global_dtors_aux+0x40>
 1e8:	1320f000 	nopne	{0}
 1ec:	e3a03001 	mov	r3, #1
 1f0:	e5c43000 	strb	r3, [r4]
 1f4:	e8bd4010 	pop	{r4, lr}
 1f8:	e12fff1e 	bx	lr
 1fc:	00001008 	.word	0x00001008
 200:	00000000 	.word	0x00000000
 204:	00000b6c 	.word	0x00000b6c

00000208 <frame_dummy>:
 208:	e92d4008 	push	{r3, lr}
 20c:	e59f3034 	ldr	r3, [pc, #52]	; 248 <frame_dummy+0x40>
 210:	e3530000 	cmp	r3, #0
 214:	159f0030 	ldrne	r0, [pc, #48]	; 24c <frame_dummy+0x44>
 218:	159f1030 	ldrne	r1, [pc, #48]	; 250 <frame_dummy+0x48>
 21c:	1320f000 	nopne	{0}
 220:	e59f002c 	ldr	r0, [pc, #44]	; 254 <frame_dummy+0x4c>
 224:	e5903000 	ldr	r3, [r0]
 228:	e3530000 	cmp	r3, #0
 22c:	0a000003 	beq	240 <frame_dummy+0x38>
 230:	e59f3020 	ldr	r3, [pc, #32]	; 258 <frame_dummy+0x50>
 234:	e3530000 	cmp	r3, #0
 238:	11a0e00f 	movne	lr, pc
 23c:	112fff13 	bxne	r3
 240:	e8bd4008 	pop	{r3, lr}
 244:	eaffffcb 	b	178 <register_tm_clones>
 248:	00000000 	.word	0x00000000
 24c:	00000b6c 	.word	0x00000b6c
 250:	0000100c 	.word	0x0000100c
 254:	00000bc8 	.word	0x00000bc8
 258:	00000000 	.word	0x00000000

0000025c <test_char>:
#include "./drivers/inc/pushbuttons.h"
#include "./drivers/inc/slider_switches.h"
#include "./drivers/inc/ps2_keyboard.h"
#include "./drivers/inc/audio.h"

void test_char() {
 25c:	e92d4800 	push	{r11, lr}
 260:	e28db004 	add	r11, sp, #4
 264:	e24dd010 	sub	sp, sp, #16
	int x, y;
	char c = 0;
 268:	e3a03000 	mov	r3, #0
 26c:	e54b300d 	strb	r3, [r11, #-13]
	for (y = 0; y <= 59; y++) {
 270:	e3a03000 	mov	r3, #0
 274:	e50b300c 	str	r3, [r11, #-12]
 278:	ea000013 	b	2cc <test_char+0x70>
		for (x = 0; x <= 79; x++) {
 27c:	e3a03000 	mov	r3, #0
 280:	e50b3008 	str	r3, [r11, #-8]
 284:	ea00000a 	b	2b4 <test_char+0x58>
			VGA_write_char_ASM(x, y, c++);
 288:	e55b300d 	ldrb	r3, [r11, #-13]
 28c:	e55b200d 	ldrb	r2, [r11, #-13]
 290:	e2822001 	add	r2, r2, #1
 294:	e54b200d 	strb	r2, [r11, #-13]
 298:	e51b0008 	ldr	r0, [r11, #-8]
 29c:	e51b100c 	ldr	r1, [r11, #-12]
 2a0:	e1a02003 	mov	r2, r3
 2a4:	eb0000ca 	bl	5d4 <VGA_write_char_ASM>

void test_char() {
	int x, y;
	char c = 0;
	for (y = 0; y <= 59; y++) {
		for (x = 0; x <= 79; x++) {
 2a8:	e51b3008 	ldr	r3, [r11, #-8]
 2ac:	e2833001 	add	r3, r3, #1
 2b0:	e50b3008 	str	r3, [r11, #-8]
 2b4:	e51b3008 	ldr	r3, [r11, #-8]
 2b8:	e353004f 	cmp	r3, #79	; 0x4f
 2bc:	dafffff1 	ble	288 <test_char+0x2c>
#include "./drivers/inc/audio.h"

void test_char() {
	int x, y;
	char c = 0;
	for (y = 0; y <= 59; y++) {
 2c0:	e51b300c 	ldr	r3, [r11, #-12]
 2c4:	e2833001 	add	r3, r3, #1
 2c8:	e50b300c 	str	r3, [r11, #-12]
 2cc:	e51b300c 	ldr	r3, [r11, #-12]
 2d0:	e353003b 	cmp	r3, #59	; 0x3b
 2d4:	daffffe8 	ble	27c <test_char+0x20>
		for (x = 0; x <= 79; x++) {
			VGA_write_char_ASM(x, y, c++);
		}
	}
}
 2d8:	e24bd004 	sub	sp, r11, #4
 2dc:	e8bd8800 	pop	{r11, pc}

000002e0 <test_byte>:
void test_byte(){
 2e0:	e92d4800 	push	{r11, lr}
 2e4:	e28db004 	add	r11, sp, #4
 2e8:	e24dd010 	sub	sp, sp, #16
	int x, y;
	char c = 0;
 2ec:	e3a03000 	mov	r3, #0
 2f0:	e54b300d 	strb	r3, [r11, #-13]
	for (y = 0; y <= 59; y++) {
 2f4:	e3a03000 	mov	r3, #0
 2f8:	e50b300c 	str	r3, [r11, #-12]
 2fc:	ea000013 	b	350 <test_byte+0x70>
		for (x = 0; x <= 79; x += 3) {
 300:	e3a03000 	mov	r3, #0
 304:	e50b3008 	str	r3, [r11, #-8]
 308:	ea00000a 	b	338 <test_byte+0x58>
			VGA_write_byte_ASM(x, y, c++);
 30c:	e55b300d 	ldrb	r3, [r11, #-13]
 310:	e55b200d 	ldrb	r2, [r11, #-13]
 314:	e2822001 	add	r2, r2, #1
 318:	e54b200d 	strb	r2, [r11, #-13]
 31c:	e51b0008 	ldr	r0, [r11, #-8]
 320:	e51b100c 	ldr	r1, [r11, #-12]
 324:	e1a02003 	mov	r2, r3
 328:	eb0000b7 	bl	60c <VGA_write_byte_ASM>
}
void test_byte(){
	int x, y;
	char c = 0;
	for (y = 0; y <= 59; y++) {
		for (x = 0; x <= 79; x += 3) {
 32c:	e51b3008 	ldr	r3, [r11, #-8]
 330:	e2833003 	add	r3, r3, #3
 334:	e50b3008 	str	r3, [r11, #-8]
 338:	e51b3008 	ldr	r3, [r11, #-8]
 33c:	e353004f 	cmp	r3, #79	; 0x4f
 340:	dafffff1 	ble	30c <test_byte+0x2c>
	}
}
void test_byte(){
	int x, y;
	char c = 0;
	for (y = 0; y <= 59; y++) {
 344:	e51b300c 	ldr	r3, [r11, #-12]
 348:	e2833001 	add	r3, r3, #1
 34c:	e50b300c 	str	r3, [r11, #-12]
 350:	e51b300c 	ldr	r3, [r11, #-12]
 354:	e353003b 	cmp	r3, #59	; 0x3b
 358:	daffffe8 	ble	300 <test_byte+0x20>
		for (x = 0; x <= 79; x += 3) {
			VGA_write_byte_ASM(x, y, c++);
		}
	}
}
 35c:	e24bd004 	sub	sp, r11, #4
 360:	e8bd8800 	pop	{r11, pc}

00000364 <test_pixel>:
void test_pixel(){
 364:	e92d4800 	push	{r11, lr}
 368:	e28db004 	add	r11, sp, #4
 36c:	e24dd010 	sub	sp, sp, #16
	int x, y;
	unsigned short colour = 0;
 370:	e3a03000 	mov	r3, #0
 374:	e14b30be 	strh	r3, [r11, #-14]
	for(y=0; y<=239; y++) {
 378:	e3a03000 	mov	r3, #0
 37c:	e50b300c 	str	r3, [r11, #-12]
 380:	ea000015 	b	3dc <test_pixel+0x78>
		for(x=0; x<=319; x++) {
 384:	e3a03000 	mov	r3, #0
 388:	e50b3008 	str	r3, [r11, #-8]
 38c:	ea00000b 	b	3c0 <test_pixel+0x5c>
			VGA_draw_point_ASM(x, y, colour++);
 390:	e15b30be 	ldrh	r3, [r11, #-14]
 394:	e15b20be 	ldrh	r2, [r11, #-14]
 398:	e2822001 	add	r2, r2, #1
 39c:	e14b20be 	strh	r2, [r11, #-14]
 3a0:	e6bf3073 	sxth	r3, r3
 3a4:	e51b0008 	ldr	r0, [r11, #-8]
 3a8:	e51b100c 	ldr	r1, [r11, #-12]
 3ac:	e1a02003 	mov	r2, r3
 3b0:	eb000069 	bl	55c <VGA_draw_point_ASM>
}
void test_pixel(){
	int x, y;
	unsigned short colour = 0;
	for(y=0; y<=239; y++) {
		for(x=0; x<=319; x++) {
 3b4:	e51b3008 	ldr	r3, [r11, #-8]
 3b8:	e2833001 	add	r3, r3, #1
 3bc:	e50b3008 	str	r3, [r11, #-8]
 3c0:	e51b2008 	ldr	r2, [r11, #-8]
 3c4:	e300313f 	movw	r3, #319	; 0x13f
 3c8:	e1520003 	cmp	r2, r3
 3cc:	daffffef 	ble	390 <test_pixel+0x2c>
	}
}
void test_pixel(){
	int x, y;
	unsigned short colour = 0;
	for(y=0; y<=239; y++) {
 3d0:	e51b300c 	ldr	r3, [r11, #-12]
 3d4:	e2833001 	add	r3, r3, #1
 3d8:	e50b300c 	str	r3, [r11, #-12]
 3dc:	e51b300c 	ldr	r3, [r11, #-12]
 3e0:	e35300ef 	cmp	r3, #239	; 0xef
 3e4:	daffffe6 	ble	384 <test_pixel+0x20>
		for(x=0; x<=319; x++) {
			VGA_draw_point_ASM(x, y, colour++);
		}
	}
}
 3e8:	e24bd004 	sub	sp, r11, #4
 3ec:	e8bd8800 	pop	{r11, pc}

000003f0 <main>:



// Start of part 3

int main(){
 3f0:	e92d4800 	push	{r11, lr}
 3f4:	e28db004 	add	r11, sp, #4
 3f8:	e24dd008 	sub	sp, sp, #8
	int samples = 0;
 3fc:	e3a03000 	mov	r3, #0
 400:	e50b3008 	str	r3, [r11, #-8]
	int signal = 0x00FFFFFF;
 404:	e3e034ff 	mvn	r3, #-16777216	; 0xff000000
 408:	e50b300c 	str	r3, [r11, #-12]
 40c:	ea000000 	b	414 <main+0x24>
				} else {
					signal = 0;
				}
			}
		}
	} return 0;
 410:	e1a00000 	nop			; (mov r0, r0)
int main(){
	int samples = 0;
	int signal = 0x00FFFFFF;
	while(1) {
						// if there's space, send a value 
		if (audio_ASM(signal)) {
 414:	e51b000c 	ldr	r0, [r11, #-12]
 418:	eb0000ab 	bl	6cc <audio_ASM>
 41c:	e1a03000 	mov	r3, r0
 420:	e3530000 	cmp	r3, #0
 424:	0afffff9 	beq	410 <main+0x20>
			samples++;	// increment number of samples sent
 428:	e51b3008 	ldr	r3, [r11, #-8]
 42c:	e2833001 	add	r3, r3, #1
 430:	e50b3008 	str	r3, [r11, #-8]
			 			//when samples sent reaches 240, switch the signal *
			if (samples > 240) {
 434:	e51b3008 	ldr	r3, [r11, #-8]
 438:	e35300f0 	cmp	r3, #240	; 0xf0
 43c:	dafffff3 	ble	410 <main+0x20>
				samples = 0;
 440:	e3a03000 	mov	r3, #0
 444:	e50b3008 	str	r3, [r11, #-8]
				if (signal == 0) {
 448:	e51b300c 	ldr	r3, [r11, #-12]
 44c:	e3530000 	cmp	r3, #0
 450:	1a000002 	bne	460 <main+0x70>
					signal = 0x00FFFFFF;
 454:	e3e034ff 	mvn	r3, #-16777216	; 0xff000000
 458:	e50b300c 	str	r3, [r11, #-12]
				} else {
					signal = 0;
				}
			}
		}
	} return 0;
 45c:	eaffffeb 	b	410 <main+0x20>
			if (samples > 240) {
				samples = 0;
				if (signal == 0) {
					signal = 0x00FFFFFF;
				} else {
					signal = 0;
 460:	e3a03000 	mov	r3, #0
 464:	e50b300c 	str	r3, [r11, #-12]
				}
			}
		}
	} return 0;
 468:	eaffffe8 	b	410 <main+0x20>

0000046c <read_PB_data_ASM>:

	.global enable_PB_INT_ASM
	.global disable_PB_INT_ASM
	
read_PB_data_ASM:	
	LDR R1, =BT_BASE
 46c:	e59f108c 	ldr	r1, [pc, #140]	; 500 <disable_PB_INT_ASM+0x14>
	LDR R0, [R1]
 470:	e5910000 	ldr	r0, [r1]
	BX LR
 474:	e12fff1e 	bx	lr

00000478 <PB_data_is_pressed_ASM>:

PB_data_is_pressed_ASM:
	PUSH {LR}
 478:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
	LDR R1, =BT_BASE // R1 contains base address of pushbutton parallel port
 47c:	e59f107c 	ldr	r1, [pc, #124]	; 500 <disable_PB_INT_ASM+0x14>
	LDR R2, [R1] // R2 contains buttons within pushbutton parallel port that are on
 480:	e5912000 	ldr	r2, [r1]
	AND R3, R2, R0 // R0 contains whose pressed status you wish to check
 484:	e0023000 	and	r3, r2, r0
	CMP R3, R0
 488:	e1530000 	cmp	r3, r0
	MOVGE R0, #1 // return true if button is pressed
 48c:	a3a00001 	movge	r0, #1
	MOVLT R0, #0 // return false if button is not pressed
 490:	b3a00000 	movlt	r0, #0
	POP {LR}
 494:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
	BX LR
 498:	e12fff1e 	bx	lr

0000049c <read_PB_edgecap_ASM>:

read_PB_edgecap_ASM:
	
	LDR R1, =EDGE_CAP
 49c:	e59f1060 	ldr	r1, [pc, #96]	; 504 <disable_PB_INT_ASM+0x18>
	LDR R0, [R1]
 4a0:	e5910000 	ldr	r0, [r1]
	BX LR
 4a4:	e12fff1e 	bx	lr

000004a8 <PB_edgecap_is_pressed_ASM>:

PB_edgecap_is_pressed_ASM:

	LDR R1, =EDGE_CAP // R1 contains edge capture address of pushbutton parallel port
 4a8:	e59f1054 	ldr	r1, [pc, #84]	; 504 <disable_PB_INT_ASM+0x18>
	LDR R2, [R1] // R2 contains value stored within edge capture address
 4ac:	e5912000 	ldr	r2, [r1]
	AND R3, R2, R0 // R0 contains whose edge capture status you wish to check
 4b0:	e0023000 	and	r3, r2, r0
	CMP R3, R0
 4b4:	e1530000 	cmp	r3, r0
	MOVGE R0, #1 // return true if edge capture bit of that button is on
 4b8:	a3a00001 	movge	r0, #1
	MOVLT R0, #0 // return true if edge capture bit of that button is off
 4bc:	b3a00000 	movlt	r0, #0
	BX LR
 4c0:	e12fff1e 	bx	lr

000004c4 <PB_clear_edgecap_ASM>:

PB_clear_edgecap_ASM:
	
	LDR R1, =EDGE_CAP // R1 contains address of edge cap register
 4c4:	e59f1038 	ldr	r1, [pc, #56]	; 504 <disable_PB_INT_ASM+0x18>
	LDR R2, [R1] // R2 contains value of interrupt mask register
 4c8:	e5912000 	ldr	r2, [r1]
	BIC R2, R2, R0 // R0 contains button whose edge cap you want to clear (complemented); R2 contains new value to be stored in edge cap register
 4cc:	e1c22000 	bic	r2, r2, r0
	STR R2, [R1] // update edge capture register
 4d0:	e5812000 	str	r2, [r1]
	BX LR
 4d4:	e12fff1e 	bx	lr

000004d8 <enable_PB_INT_ASM>:
	

enable_PB_INT_ASM:
	
	LDR R1, =INT_BASE
 4d8:	e59f1028 	ldr	r1, [pc, #40]	; 508 <disable_PB_INT_ASM+0x1c>
	LDR R2, [R1] // R2 contains value of interrupt mask register
 4dc:	e5912000 	ldr	r2, [r1]
	ORR R2, R2, R0 // R0 contains button whose interrupt you want to enable; R2 contains new value to be stored in interrupt mask register
 4e0:	e1822000 	orr	r2, r2, r0
	STR R2, [R1] // update interrupt mask register
 4e4:	e5812000 	str	r2, [r1]
	BX LR
 4e8:	e12fff1e 	bx	lr

000004ec <disable_PB_INT_ASM>:

disable_PB_INT_ASM:
	
	LDR R1, =INT_BASE // R1 contains address of interrupt mask register
 4ec:	e59f1014 	ldr	r1, [pc, #20]	; 508 <disable_PB_INT_ASM+0x1c>
	LDR R2, [R1] // R2 contains value of interrupt mask register
 4f0:	e5912000 	ldr	r2, [r1]
	BIC R2, R2, R0 // R0 contains button whose edge cap you want to clear (complemented); R2 contains new value to be stored in edge cap register
 4f4:	e1c22000 	bic	r2, r2, r0
	STR R2, [R1] // update interrupt mask register	
 4f8:	e5812000 	str	r2, [r1]
	BX LR
 4fc:	e12fff1e 	bx	lr

	.global enable_PB_INT_ASM
	.global disable_PB_INT_ASM
	
read_PB_data_ASM:	
	LDR R1, =BT_BASE
 500:	ff200050 	.word	0xff200050
	POP {LR}
	BX LR

read_PB_edgecap_ASM:
	
	LDR R1, =EDGE_CAP
 504:	ff20005c 	.word	0xff20005c
	BX LR
	

enable_PB_INT_ASM:
	
	LDR R1, =INT_BASE
 508:	ff200058 	.word	0xff200058

0000050c <read_slider_switches_ASM>:
	.text
	.equ SW_BASE, 0xFF200040
	.global read_slider_switches_ASM

read_slider_switches_ASM:	
	LDR R1, =SW_BASE
 50c:	e59f1004 	ldr	r1, [pc, #4]	; 518 <read_slider_switches_ASM+0xc>
	LDR R0, [R1]
 510:	e5910000 	ldr	r0, [r1]
	BX LR
 514:	e12fff1e 	bx	lr
	.text
	.equ SW_BASE, 0xFF200040
	.global read_slider_switches_ASM

read_slider_switches_ASM:	
	LDR R1, =SW_BASE
 518:	ff200040 	.word	0xff200040

0000051c <VGA_clear_pixelbuff_ASM>:
	.global VGA_write_char_ASM
	.global VGA_write_byte_ASM
	.global VGA_draw_point_ASM
		
VGA_clear_pixelbuff_ASM:	
	PUSH {R4-R5}	
 51c:	e92d0030 	push	{r4, r5}
	MOV R2, #0
 520:	e3a02000 	mov	r2, #0
	LDR R3, =VGA_PIXEL_BUF_BASE	//here R3 will have/point to address of pixel buff
 524:	e3a03332 	mov	r3, #-939524096	; 0xc8000000
	MOV R0, #0
 528:	e3a00000 	mov	r0, #0

0000052c <PIXEL_LOOPX>:

PIXEL_LOOPX:
	MOV R1, #0				// below we LSL by 1 because address for x starts after the first bit
 52c:	e3a01000 	mov	r1, #0
	ADD R4, R3, R0, LSL #1 	//in these loops below we travers the address grid from point o,o to the last one
 530:	e0834080 	add	r4, r3, r0, lsl #1

00000534 <PIXEL_LOOPY>:

PIXEL_LOOPY:				
	ADD R5, R4, R1, LSL #10 // we LSL by 10 because address for y starts at 10th bit position
 534:	e0845501 	add	r5, r4, r1, lsl #10
	STRH R2, [R5]		//We store data from R2 into Addre of R5 which is a point in the grid
 538:	e1c520b0 	strh	r2, [r5]
					    //this point will keep changing as we travers the loop
	ADD R1, R1, #1		//increase rhe counter
 53c:	e2811001 	add	r1, r1, #1
	CMP R1, #240
 540:	e35100f0 	cmp	r1, #240	; 0xf0
	BLT PIXEL_LOOPY		//loop if y position of grid Less than 240, were still in same colum
 544:	bafffffa 	blt	534 <PIXEL_LOOPY>
	ADD R0, R0, #1
 548:	e2800001 	add	r0, r0, #1
	CMP R0, #320			//loop to next x position if the end is not reached
 54c:	e3500d05 	cmp	r0, #320	; 0x140
	BLT PIXEL_LOOPX
 550:	bafffff5 	blt	52c <PIXEL_LOOPX>
	POP {R4-R5}
 554:	e8bd0030 	pop	{r4, r5}
	BX LR
 558:	e12fff1e 	bx	lr

0000055c <VGA_draw_point_ASM>:

VGA_draw_point_ASM:
	LDR R3, =319  //these lines below check that were still in the grid!! Otherwise we branch out
 55c:	e59f3128 	ldr	r3, [pc, #296]	; 68c <HEX_ASCII+0x10>
	CMP R0, #0
 560:	e3500000 	cmp	r0, #0
	BXLT LR
 564:	b12fff1e 	bxlt	lr
	CMP R1, #0
 568:	e3510000 	cmp	r1, #0
	BXLT LR
 56c:	b12fff1e 	bxlt	lr
	CMP R0, R3
 570:	e1500003 	cmp	r0, r3
	BXGT LR
 574:	c12fff1e 	bxgt	lr
	CMP R1, #239
 578:	e35100ef 	cmp	r1, #239	; 0xef
	BXGT LR
 57c:	c12fff1e 	bxgt	lr
	
	LDR R3, =VGA_PIXEL_BUF_BASE // we load address/create pointer
 580:	e3a03332 	mov	r3, #-939524096	; 0xc8000000
	ADD R3, R3, R0, LSL #1		//add x, y position into address, to get correct grid
 584:	e0833080 	add	r3, r3, r0, lsl #1
	ADD R3, R3, R1, LSL #10		//then we store the data/pixel color as half word into the right/current grid position
 588:	e0833501 	add	r3, r3, r1, lsl #10
	STRH R2, [R3]
 58c:	e1c320b0 	strh	r2, [r3]
	BX LR
 590:	e12fff1e 	bx	lr

00000594 <VGA_clear_charbuff_ASM>:
	
VGA_clear_charbuff_ASM:
	PUSH {R4-R5}	
 594:	e92d0030 	push	{r4, r5}
	MOV R2, #0
 598:	e3a02000 	mov	r2, #0
	LDR R3, =VGA_CHAR_BUF_BASE
 59c:	e3a034c9 	mov	r3, #-922746880	; 0xc9000000
	MOV R0, #0
 5a0:	e3a00000 	mov	r0, #0

000005a4 <CHAR_LOOPX>:

CHAR_LOOPX:
	MOV R1, #0
 5a4:	e3a01000 	mov	r1, #0
	ADD R4, R3, R0, LSL #1 //very similar to pixel clear, but with slight changes
 5a8:	e0834080 	add	r4, r3, r0, lsl #1

000005ac <CHAR_LOOPY>:

CHAR_LOOPY:				
	ADD R5, R4, R1, LSL #7 //lsl by 7 because unlike pixel buffer, y position start at bit 7
 5ac:	e0845381 	add	r5, r4, r1, lsl #7
							//but the rest is very similare!
	STRH R2, [R5]			//can refer to comments for clear pixel, as it follows same logic
 5b0:	e1c520b0 	strh	r2, [r5]
	
	ADD R1, R1, #1
 5b4:	e2811001 	add	r1, r1, #1
	CMP R1, #60
 5b8:	e351003c 	cmp	r1, #60	; 0x3c
	BLT CHAR_LOOPY
 5bc:	bafffffa 	blt	5ac <CHAR_LOOPY>
	
	ADD R0, R0, #1
 5c0:	e2800001 	add	r0, r0, #1
	CMP R0, #80
 5c4:	e3500050 	cmp	r0, #80	; 0x50
	BLT CHAR_LOOPX
 5c8:	bafffff5 	blt	5a4 <CHAR_LOOPX>

	POP {R4-R5}
 5cc:	e8bd0030 	pop	{r4, r5}
	BX LR
 5d0:	e12fff1e 	bx	lr

000005d4 <VGA_write_char_ASM>:

VGA_write_char_ASM:

	LDR R3, =79  //in the first part we verify that we arw within the grid, otherwise we branch out
 5d4:	e3a0304f 	mov	r3, #79	; 0x4f
	CMP R0, #0
 5d8:	e3500000 	cmp	r0, #0
	BXLT LR
 5dc:	b12fff1e 	bxlt	lr
	CMP R1, #0
 5e0:	e3510000 	cmp	r1, #0
	BXLT LR
 5e4:	b12fff1e 	bxlt	lr
	CMP R0, R3
 5e8:	e1500003 	cmp	r0, r3
	BXGT LR
 5ec:	c12fff1e 	bxgt	lr
	CMP R1, #59
 5f0:	e351003b 	cmp	r1, #59	; 0x3b
	BXGT LR
 5f4:	c12fff1e 	bxgt	lr
	
	LDR R3, =VGA_CHAR_BUF_BASE		//we create pointer to addre of vga char buff base
 5f8:	e3a034c9 	mov	r3, #-922746880	; 0xc9000000
	ADD R3, R3, R0					//shift the x, y by correct amount, to add to base addre
 5fc:	e0833000 	add	r3, r3, r0
	ADD R3, R3, R1, LSL #7			//so we can write to the correct mem address/grid position
 600:	e0833381 	add	r3, r3, r1, lsl #7
	STRB R2, [R3]					//we store as a byte
 604:	e5c32000 	strb	r2, [r3]
	BX LR
 608:	e12fff1e 	bx	lr

0000060c <VGA_write_byte_ASM>:

VGA_write_byte_ASM:
	LDR R3, =79    //same as before, we check to see that we are within the grid
 60c:	e3a0304f 	mov	r3, #79	; 0x4f
	CMP R0, #0		//otherwise we branchout
 610:	e3500000 	cmp	r0, #0
	BXLT LR
 614:	b12fff1e 	bxlt	lr
	CMP R1, #0
 618:	e3510000 	cmp	r1, #0
	BXLT LR
 61c:	b12fff1e 	bxlt	lr
	CMP R0, R3
 620:	e1500003 	cmp	r0, r3
	BXGT LR
 624:	c12fff1e 	bxgt	lr
	CMP R1, #59
 628:	e351003b 	cmp	r1, #59	; 0x3b
	BXGT LR
 62c:	c12fff1e 	bxgt	lr
	
	MOV R5, #0	//initialize the Registers to 0
 630:	e3a05000 	mov	r5, #0
	MOV R6, #0
 634:	e3a06000 	mov	r6, #0
	MOV R7, #0
 638:	e3a07000 	mov	r7, #0

	PUSH {R5-R7}
 63c:	e92d00e0 	push	{r5, r6, r7}

	LDR R3, =VGA_CHAR_BUF_BASE //load addre/create pointer
 640:	e3a034c9 	mov	r3, #-922746880	; 0xc9000000
	ADD R3, R3, R0
 644:	e0833000 	add	r3, r3, r0
	ADD R3, R3, R1, LSL #7 //add the shifter x, y position to get right grid position/addres to write to
 648:	e0833381 	add	r3, r3, r1, lsl #7
	AND R5, R2, #0xF0	//mask first byte
 64c:	e20250f0 	and	r5, r2, #240	; 0xf0
	AND R6, R2, #0x0F // mask second byte, these are done to get a number for first and second position
 650:	e202600f 	and	r6, r2, #15
	LSR R5, R5, #4	//these will be manipulated and then used to create the right offset to get the right
 654:	e1a05225 	lsr	r5, r5, #4
					// Hex_ASCII conversion, to get the right HEX represenation
	LDR R4, =HEX_ASCII //pointer with address of first byte in HEX_ASCII
 658:	e59f4030 	ldr	r4, [pc, #48]	; 690 <HEX_ASCII+0x14>
	ADD R7, R4, R6		// we add the right offset to get the corresponding HEX value rep
 65c:	e0847006 	add	r7, r4, r6
	ADD R4, R4, R5
 660:	e0844005 	add	r4, r4, r5
	LDRB R4, [R4]	
 664:	e5d44000 	ldrb	r4, [r4]
	STRB R4, [R3]		//we store the first HEX val
 668:	e5c34000 	strb	r4, [r3]

	LDRB R7, [R7]
 66c:	e5d77000 	ldrb	r7, [r7]
	STRB R7, [R3,#1]  // we store the second HEX val
 670:	e5c37001 	strb	r7, [r3, #1]
	POP {R5-R7}
 674:	e8bd00e0 	pop	{r5, r6, r7}

	BX LR		//then we pop and return to the begining
 678:	e12fff1e 	bx	lr

0000067c <HEX_ASCII>:
 67c:	33323130 	.word	0x33323130
 680:	37363534 	.word	0x37363534
 684:	42413938 	.word	0x42413938
 688:	46454443 	.word	0x46454443
	BLT PIXEL_LOOPX
	POP {R4-R5}
	BX LR

VGA_draw_point_ASM:
	LDR R3, =319  //these lines below check that were still in the grid!! Otherwise we branch out
 68c:	0000013f 	.word	0x0000013f
	ADD R3, R3, R1, LSL #7 //add the shifter x, y position to get right grid position/addres to write to
	AND R5, R2, #0xF0	//mask first byte
	AND R6, R2, #0x0F // mask second byte, these are done to get a number for first and second position
	LSR R5, R5, #4	//these will be manipulated and then used to create the right offset to get the right
					// Hex_ASCII conversion, to get the right HEX represenation
	LDR R4, =HEX_ASCII //pointer with address of first byte in HEX_ASCII
 690:	0000067c 	.word	0x0000067c

00000694 <read_PS2_data_ASM>:
	.equ VGA_PS2_DATA_BASE, 0xFF200100
	.global read_PS2_data_ASM

read_PS2_data_ASM:

	PUSH {LR}
 694:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
	LDR R3, =VGA_PS2_DATA_BASE
 698:	e59f3028 	ldr	r3, [pc, #40]	; 6c8 <GOTO+0x14>
	LDR R2, [R3]
 69c:	e5932000 	ldr	r2, [r3]
	ANDS R5, R2, #0x8000
 6a0:	e2125902 	ands	r5, r2, #32768	; 0x8000
	BNE GOTO
 6a4:	1a000002 	bne	6b4 <GOTO>
	MOV R0, #0
 6a8:	e3a00000 	mov	r0, #0
	POP {LR}
 6ac:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
	BX LR
 6b0:	e12fff1e 	bx	lr

000006b4 <GOTO>:

GOTO:
	AND R1, R2, #0xFF
 6b4:	e20210ff 	and	r1, r2, #255	; 0xff
	STRB R1, [R0]
 6b8:	e5c01000 	strb	r1, [r0]
	MOV R0, #1
 6bc:	e3a00001 	mov	r0, #1
	POP {LR}
 6c0:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
	BX LR
 6c4:	e12fff1e 	bx	lr
	.global read_PS2_data_ASM

read_PS2_data_ASM:

	PUSH {LR}
	LDR R3, =VGA_PS2_DATA_BASE
 6c8:	ff200100 	.word	0xff200100

000006cc <audio_ASM>:
	.equ RIGHTDATA, 0xFF20304C	
	.global audio_ASM

audio_ASM:

	MOV R4, #0				// initializing the registers 
 6cc:	e3a04000 	mov	r4, #0
	MOV R5, #0
 6d0:	e3a05000 	mov	r5, #0
	MOV R6, #0
 6d4:	e3a06000 	mov	r6, #0

	PUSH {R4-R8} 
 6d8:	e92d01f0 	push	{r4, r5, r6, r7, r8}
	
	LDR R3, =FIFO_SPACE		 // Making pointer to FIFIO address
 6dc:	e59f3048 	ldr	r3, [pc, #72]	; 72c <GOTO+0xc>
	LDR R7, =LEFTDATA 		 // Making pointer to Leftdata and right data address
 6e0:	e59f7048 	ldr	r7, [pc, #72]	; 730 <GOTO+0x10>
	LDR R8, =RIGHTDATA
 6e4:	e59f8048 	ldr	r8, [pc, #72]	; 734 <GOTO+0x14>
	LDR R2, [R3]			// loading register at loc addre of FIFO
 6e8:	e5932000 	ldr	r2, [r3]
	AND R5, R2, #0xFF000000 // masking the first 6 bytes, to get 2 WSLC bytes
 6ec:	e20254ff 	and	r5, r2, #-16777216	; 0xff000000
	AND R6, R2, #0x00FF0000 // masking the first 4 and last two bytes to get 2 WSRC bytes
 6f0:	e20268ff 	and	r6, r2, #16711680	; 0xff0000
	LSR R5, R5, #24 		// right shift to get number of unsed space in WSLC
 6f4:	e1a05c25 	lsr	r5, r5, #24
							// these bytes contain the number of free spaces left.
	CMP R5, #0 				// if there are no spaces left, branch, otherwise see other, WSRC
 6f8:	e3550000 	cmp	r5, #0
	BEQ GOTO
 6fc:	0a000007 	beq	720 <GOTO>
	LSR R6, R6, #16 		// shift this one by 16 bits, 4bytes, to get # of unsed space
 700:	e1a06826 	lsr	r6, r6, #16
	CMP R6, #0
 704:	e3560000 	cmp	r6, #0
	BEQ GOTO
 708:	0a000004 	beq	720 <GOTO>
	
	STR R0, [R7] 			// if space unsed in both, then we can store input, R0 in LEFT and right data reg
 70c:	e5870000 	str	r0, [r7]
	STR R0, [R8]
 710:	e5880000 	str	r0, [r8]
	MOV  R0, #1	 			// if succesful, put 1 in R0 after words
 714:	e3a00001 	mov	r0, #1
	POP {R4-R8} 			// pop and return from subroutin
 718:	e8bd01f0 	pop	{r4, r5, r6, r7, r8}
	BX LR
 71c:	e12fff1e 	bx	lr

00000720 <GOTO>:

GOTO:						// in the event of WSLC or WSRC being full, we branch here

	MOV R0, #0
 720:	e3a00000 	mov	r0, #0
	POP {R4-R8}
 724:	e8bd01f0 	pop	{r4, r5, r6, r7, r8}
	BX LR
 728:	e12fff1e 	bx	lr
	MOV R5, #0
	MOV R6, #0

	PUSH {R4-R8} 
	
	LDR R3, =FIFO_SPACE		 // Making pointer to FIFIO address
 72c:	ff203044 	.word	0xff203044
	LDR R7, =LEFTDATA 		 // Making pointer to Leftdata and right data address
 730:	ff203048 	.word	0xff203048
	LDR R8, =RIGHTDATA
 734:	ff20304c 	.word	0xff20304c

00000738 <atexit>:
 738:	e1a01000 	mov	r1, r0
 73c:	e3a00000 	mov	r0, #0
 740:	e92d4008 	push	{r3, lr}
 744:	e1a02000 	mov	r2, r0
 748:	e1a03000 	mov	r3, r0
 74c:	eb00000e 	bl	78c <__register_exitproc>
 750:	e8bd4008 	pop	{r3, lr}
 754:	e12fff1e 	bx	lr

00000758 <exit>:
 758:	e92d4008 	push	{r3, lr}
 75c:	e3a01000 	mov	r1, #0
 760:	e1a04000 	mov	r4, r0
 764:	eb000045 	bl	880 <__call_exitprocs>
 768:	e59f3018 	ldr	r3, [pc, #24]	; 788 <exit+0x30>
 76c:	e5930000 	ldr	r0, [r3]
 770:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
 774:	e3530000 	cmp	r3, #0
 778:	11a0e00f 	movne	lr, pc
 77c:	112fff13 	bxne	r3
 780:	e1a00004 	mov	r0, r4
 784:	eb0000c9 	bl	ab0 <_exit>
 788:	00000b70 	.word	0x00000b70

0000078c <__register_exitproc>:
 78c:	e59fc0e4 	ldr	r12, [pc, #228]	; 878 <__register_exitproc+0xec>
 790:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
 794:	e59c4000 	ldr	r4, [r12]
 798:	e594c148 	ldr	r12, [r4, #328]	; 0x148
 79c:	e35c0000 	cmp	r12, #0
 7a0:	0284cf53 	addeq	r12, r4, #332	; 0x14c
 7a4:	e59c5004 	ldr	r5, [r12, #4]
 7a8:	0584c148 	streq	r12, [r4, #328]	; 0x148
 7ac:	e355001f 	cmp	r5, #31
 7b0:	e24dd010 	sub	sp, sp, #16
 7b4:	e1a06000 	mov	r6, r0
 7b8:	da000015 	ble	814 <__register_exitproc+0x88>
 7bc:	e59f00b8 	ldr	r0, [pc, #184]	; 87c <__register_exitproc+0xf0>
 7c0:	e3500000 	cmp	r0, #0
 7c4:	1a000001 	bne	7d0 <__register_exitproc+0x44>
 7c8:	e3e00000 	mvn	r0, #0
 7cc:	ea000018 	b	834 <__register_exitproc+0xa8>
 7d0:	e3a00e19 	mov	r0, #400	; 0x190
 7d4:	e58d100c 	str	r1, [sp, #12]
 7d8:	e58d2008 	str	r2, [sp, #8]
 7dc:	e58d3004 	str	r3, [sp, #4]
 7e0:	e320f000 	nop	{0}
 7e4:	e250c000 	subs	r12, r0, #0
 7e8:	e59d100c 	ldr	r1, [sp, #12]
 7ec:	e59d2008 	ldr	r2, [sp, #8]
 7f0:	e59d3004 	ldr	r3, [sp, #4]
 7f4:	0afffff3 	beq	7c8 <__register_exitproc+0x3c>
 7f8:	e5945148 	ldr	r5, [r4, #328]	; 0x148
 7fc:	e3a00000 	mov	r0, #0
 800:	e58c0004 	str	r0, [r12, #4]
 804:	e58c5000 	str	r5, [r12]
 808:	e584c148 	str	r12, [r4, #328]	; 0x148
 80c:	e58c0188 	str	r0, [r12, #392]	; 0x188
 810:	e58c018c 	str	r0, [r12, #396]	; 0x18c
 814:	e3560000 	cmp	r6, #0
 818:	e59c4004 	ldr	r4, [r12, #4]
 81c:	1a000007 	bne	840 <__register_exitproc+0xb4>
 820:	e2843002 	add	r3, r4, #2
 824:	e2844001 	add	r4, r4, #1
 828:	e78c1103 	str	r1, [r12, r3, lsl #2]
 82c:	e58c4004 	str	r4, [r12, #4]
 830:	e3a00000 	mov	r0, #0
 834:	e28dd010 	add	sp, sp, #16
 838:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
 83c:	e12fff1e 	bx	lr
 840:	e3a00001 	mov	r0, #1
 844:	e1a00410 	lsl	r0, r0, r4
 848:	e08c8104 	add	r8, r12, r4, lsl #2
 84c:	e3560002 	cmp	r6, #2
 850:	e59c7188 	ldr	r7, [r12, #392]	; 0x188
 854:	e5883108 	str	r3, [r8, #264]	; 0x108
 858:	059c318c 	ldreq	r3, [r12, #396]	; 0x18c
 85c:	e1877000 	orr	r7, r7, r0
 860:	01830000 	orreq	r0, r3, r0
 864:	e1a05008 	mov	r5, r8
 868:	e5882088 	str	r2, [r8, #136]	; 0x88
 86c:	e58c7188 	str	r7, [r12, #392]	; 0x188
 870:	058c018c 	streq	r0, [r12, #396]	; 0x18c
 874:	eaffffe9 	b	820 <__register_exitproc+0x94>
 878:	00000b70 	.word	0x00000b70
 87c:	00000000 	.word	0x00000000

00000880 <__call_exitprocs>:
 880:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
 884:	e59f3168 	ldr	r3, [pc, #360]	; 9f4 <__call_exitprocs+0x174>
 888:	e5933000 	ldr	r3, [r3]
 88c:	e24dd014 	sub	sp, sp, #20
 890:	e58d3004 	str	r3, [sp, #4]
 894:	e2833f52 	add	r3, r3, #328	; 0x148
 898:	e58d0008 	str	r0, [sp, #8]
 89c:	e58d300c 	str	r3, [sp, #12]
 8a0:	e1a07001 	mov	r7, r1
 8a4:	e3a08001 	mov	r8, #1
 8a8:	e59d3004 	ldr	r3, [sp, #4]
 8ac:	e5936148 	ldr	r6, [r3, #328]	; 0x148
 8b0:	e3560000 	cmp	r6, #0
 8b4:	e59db00c 	ldr	r11, [sp, #12]
 8b8:	0a000033 	beq	98c <__call_exitprocs+0x10c>
 8bc:	e5965004 	ldr	r5, [r6, #4]
 8c0:	e2554001 	subs	r4, r5, #1
 8c4:	5286a088 	addpl	r10, r6, #136	; 0x88
 8c8:	5285501f 	addpl	r5, r5, #31
 8cc:	508a5105 	addpl	r5, r10, r5, lsl #2
 8d0:	5a000007 	bpl	8f4 <__call_exitprocs+0x74>
 8d4:	ea000029 	b	980 <__call_exitprocs+0x100>
 8d8:	e5953000 	ldr	r3, [r5]
 8dc:	e1530007 	cmp	r3, r7
 8e0:	0a000005 	beq	8fc <__call_exitprocs+0x7c>
 8e4:	e2444001 	sub	r4, r4, #1
 8e8:	e3740001 	cmn	r4, #1
 8ec:	e2455004 	sub	r5, r5, #4
 8f0:	0a000022 	beq	980 <__call_exitprocs+0x100>
 8f4:	e3570000 	cmp	r7, #0
 8f8:	1afffff6 	bne	8d8 <__call_exitprocs+0x58>
 8fc:	e5963004 	ldr	r3, [r6, #4]
 900:	e06a2005 	rsb	r2, r10, r5
 904:	e2433001 	sub	r3, r3, #1
 908:	e0862002 	add	r2, r6, r2
 90c:	e1530004 	cmp	r3, r4
 910:	e5123078 	ldr	r3, [r2, #-120]	; 0xffffff88
 914:	13a01000 	movne	r1, #0
 918:	05864004 	streq	r4, [r6, #4]
 91c:	15021078 	strne	r1, [r2, #-120]	; 0xffffff88
 920:	e3530000 	cmp	r3, #0
 924:	0affffee 	beq	8e4 <__call_exitprocs+0x64>
 928:	e1a02418 	lsl	r2, r8, r4
 92c:	e5961188 	ldr	r1, [r6, #392]	; 0x188
 930:	e1120001 	tst	r2, r1
 934:	e5969004 	ldr	r9, [r6, #4]
 938:	0a000016 	beq	998 <__call_exitprocs+0x118>
 93c:	e596118c 	ldr	r1, [r6, #396]	; 0x18c
 940:	e1120001 	tst	r2, r1
 944:	1a000016 	bne	9a4 <__call_exitprocs+0x124>
 948:	e59d0008 	ldr	r0, [sp, #8]
 94c:	e5151080 	ldr	r1, [r5, #-128]	; 0xffffff80
 950:	e1a0e00f 	mov	lr, pc
 954:	e12fff13 	bx	r3
 958:	e5963004 	ldr	r3, [r6, #4]
 95c:	e1530009 	cmp	r3, r9
 960:	1affffd0 	bne	8a8 <__call_exitprocs+0x28>
 964:	e59b3000 	ldr	r3, [r11]
 968:	e1530006 	cmp	r3, r6
 96c:	1affffcd 	bne	8a8 <__call_exitprocs+0x28>
 970:	e2444001 	sub	r4, r4, #1
 974:	e3740001 	cmn	r4, #1
 978:	e2455004 	sub	r5, r5, #4
 97c:	1affffdc 	bne	8f4 <__call_exitprocs+0x74>
 980:	e59f1070 	ldr	r1, [pc, #112]	; 9f8 <__call_exitprocs+0x178>
 984:	e3510000 	cmp	r1, #0
 988:	1a000009 	bne	9b4 <__call_exitprocs+0x134>
 98c:	e28dd014 	add	sp, sp, #20
 990:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
 994:	e12fff1e 	bx	lr
 998:	e1a0e00f 	mov	lr, pc
 99c:	e12fff13 	bx	r3
 9a0:	eaffffec 	b	958 <__call_exitprocs+0xd8>
 9a4:	e5150080 	ldr	r0, [r5, #-128]	; 0xffffff80
 9a8:	e1a0e00f 	mov	lr, pc
 9ac:	e12fff13 	bx	r3
 9b0:	eaffffe8 	b	958 <__call_exitprocs+0xd8>
 9b4:	e5963004 	ldr	r3, [r6, #4]
 9b8:	e3530000 	cmp	r3, #0
 9bc:	e5963000 	ldr	r3, [r6]
 9c0:	1a000008 	bne	9e8 <__call_exitprocs+0x168>
 9c4:	e3530000 	cmp	r3, #0
 9c8:	0a000006 	beq	9e8 <__call_exitprocs+0x168>
 9cc:	e1a00006 	mov	r0, r6
 9d0:	e58b3000 	str	r3, [r11]
 9d4:	e320f000 	nop	{0}
 9d8:	e59b6000 	ldr	r6, [r11]
 9dc:	e3560000 	cmp	r6, #0
 9e0:	1affffb5 	bne	8bc <__call_exitprocs+0x3c>
 9e4:	eaffffe8 	b	98c <__call_exitprocs+0x10c>
 9e8:	e1a0b006 	mov	r11, r6
 9ec:	e1a06003 	mov	r6, r3
 9f0:	eafffff9 	b	9dc <__call_exitprocs+0x15c>
 9f4:	00000b70 	.word	0x00000b70
 9f8:	00000000 	.word	0x00000000

000009fc <register_fini>:
 9fc:	e92d4008 	push	{r3, lr}
 a00:	e59f3010 	ldr	r3, [pc, #16]	; a18 <register_fini+0x1c>
 a04:	e3530000 	cmp	r3, #0
 a08:	159f000c 	ldrne	r0, [pc, #12]	; a1c <register_fini+0x20>
 a0c:	1bffff49 	blne	738 <atexit>
 a10:	e8bd4008 	pop	{r3, lr}
 a14:	e12fff1e 	bx	lr
 a18:	00000b98 	.word	0x00000b98
 a1c:	00000a20 	.word	0x00000a20

00000a20 <__libc_fini_array>:
 a20:	e92d4038 	push	{r3, r4, r5, lr}
 a24:	e59f5030 	ldr	r5, [pc, #48]	; a5c <__libc_fini_array+0x3c>
 a28:	e59f4030 	ldr	r4, [pc, #48]	; a60 <__libc_fini_array+0x40>
 a2c:	e0654004 	rsb	r4, r5, r4
 a30:	e1b04144 	asrs	r4, r4, #2
 a34:	10855104 	addne	r5, r5, r4, lsl #2
 a38:	0a000004 	beq	a50 <__libc_fini_array+0x30>
 a3c:	e5353004 	ldr	r3, [r5, #-4]!
 a40:	e1a0e00f 	mov	lr, pc
 a44:	e12fff13 	bx	r3
 a48:	e2544001 	subs	r4, r4, #1
 a4c:	1afffffa 	bne	a3c <__libc_fini_array+0x1c>
 a50:	eb000050 	bl	b98 <__libc_fini>
 a54:	e8bd4038 	pop	{r3, r4, r5, lr}
 a58:	e12fff1e 	bx	lr
 a5c:	00000bb0 	.word	0x00000bb0
 a60:	00000bb4 	.word	0x00000bb4

00000a64 <__cs3_premain>:
 a64:	e92d4008 	push	{r3, lr}
 a68:	eb00001d 	bl	ae4 <__libc_init_array>
 a6c:	e59f3030 	ldr	r3, [pc, #48]	; aa4 <__cs3_premain+0x40>
 a70:	e3530000 	cmp	r3, #0
 a74:	15930000 	ldrne	r0, [r3]
 a78:	01a00003 	moveq	r0, r3
 a7c:	e59f3024 	ldr	r3, [pc, #36]	; aa8 <__cs3_premain+0x44>
 a80:	e3530000 	cmp	r3, #0
 a84:	15931000 	ldrne	r1, [r3]
 a88:	01a01003 	moveq	r1, r3
 a8c:	e3a02000 	mov	r2, #0
 a90:	ebfffe56 	bl	3f0 <main>
 a94:	e59f3010 	ldr	r3, [pc, #16]	; aac <__cs3_premain+0x48>
 a98:	e3530000 	cmp	r3, #0
 a9c:	1bffff2d 	blne	758 <exit>
 aa0:	eafffffe 	b	aa0 <__cs3_premain+0x3c>
	...
 aac:	00000758 	.word	0x00000758

00000ab0 <_exit>:
 ab0:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
 ab4:	e3a00018 	mov	r0, #24
 ab8:	e59f1004 	ldr	r1, [pc, #4]	; ac4 <_exit+0x14>
 abc:	ef123456 	svc	0x00123456
 ac0:	eafffffe 	b	ac0 <_exit+0x10>
 ac4:	00020026 	.word	0x00020026

00000ac8 <__cs3_isr_interrupt>:
 ac8:	eafffffe 	b	ac8 <__cs3_isr_interrupt>

00000acc <__cs3_isr_undef>:
 acc:	eafffffe 	b	acc <__cs3_isr_undef>

00000ad0 <__cs3_isr_swi>:
 ad0:	eafffffe 	b	ad0 <__cs3_isr_swi>

00000ad4 <__cs3_isr_pabort>:
 ad4:	eafffffe 	b	ad4 <__cs3_isr_pabort>

00000ad8 <__cs3_isr_dabort>:
 ad8:	eafffffe 	b	ad8 <__cs3_isr_dabort>

00000adc <__cs3_isr_irq>:
 adc:	eafffffe 	b	adc <__cs3_isr_irq>

00000ae0 <__cs3_isr_fiq>:
 ae0:	eafffffe 	b	ae0 <__cs3_isr_fiq>

00000ae4 <__libc_init_array>:
 ae4:	e92d4070 	push	{r4, r5, r6, lr}
 ae8:	e59f506c 	ldr	r5, [pc, #108]	; b5c <__libc_init_array+0x78>
 aec:	e59f606c 	ldr	r6, [pc, #108]	; b60 <__libc_init_array+0x7c>
 af0:	e0656006 	rsb	r6, r5, r6
 af4:	e1b06146 	asrs	r6, r6, #2
 af8:	12455004 	subne	r5, r5, #4
 afc:	13a04000 	movne	r4, #0
 b00:	0a000005 	beq	b1c <__libc_init_array+0x38>
 b04:	e5b53004 	ldr	r3, [r5, #4]!
 b08:	e2844001 	add	r4, r4, #1
 b0c:	e1a0e00f 	mov	lr, pc
 b10:	e12fff13 	bx	r3
 b14:	e1560004 	cmp	r6, r4
 b18:	1afffff9 	bne	b04 <__libc_init_array+0x20>
 b1c:	e59f5040 	ldr	r5, [pc, #64]	; b64 <__libc_init_array+0x80>
 b20:	e59f6040 	ldr	r6, [pc, #64]	; b68 <__libc_init_array+0x84>
 b24:	e0656006 	rsb	r6, r5, r6
 b28:	eb000012 	bl	b78 <_init>
 b2c:	e1b06146 	asrs	r6, r6, #2
 b30:	12455004 	subne	r5, r5, #4
 b34:	13a04000 	movne	r4, #0
 b38:	0a000005 	beq	b54 <__libc_init_array+0x70>
 b3c:	e5b53004 	ldr	r3, [r5, #4]!
 b40:	e2844001 	add	r4, r4, #1
 b44:	e1a0e00f 	mov	lr, pc
 b48:	e12fff13 	bx	r3
 b4c:	e1560004 	cmp	r6, r4
 b50:	1afffff9 	bne	b3c <__libc_init_array+0x58>
 b54:	e8bd4070 	pop	{r4, r5, r6, lr}
 b58:	e12fff1e 	bx	lr
 b5c:	00000b90 	.word	0x00000b90
 b60:	00000b90 	.word	0x00000b90
 b64:	00000b90 	.word	0x00000b90
 b68:	00000b98 	.word	0x00000b98

Disassembly of section .rodata:

00000b70 <_global_impure_ptr>:
 b70:	00000bd8 00000043                       ....C...

00000b78 <_init>:
 b78:	e1a0c00d 	mov	r12, sp
 b7c:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
 b80:	e24cb004 	sub	r11, r12, #4
 b84:	e24bd028 	sub	sp, r11, #40	; 0x28
 b88:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
 b8c:	e12fff1e 	bx	lr

00000b90 <__init_array_start>:
 b90:	000009fc 	.word	0x000009fc

00000b94 <__frame_dummy_init_array_entry>:
 b94:	00000208                                ....

00000b98 <__libc_fini>:
 b98:	e1a0c00d 	mov	r12, sp
 b9c:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
 ba0:	e24cb004 	sub	r11, r12, #4
 ba4:	e24bd028 	sub	sp, r11, #40	; 0x28
 ba8:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
 bac:	e12fff1e 	bx	lr

00000bb0 <__fini_array_start>:
 bb0:	000001c4 	.word	0x000001c4

00000bb4 <__cs3_regions>:
 bb4:	00000000 	.word	0x00000000
 bb8:	00000040 	.word	0x00000040
 bbc:	00000040 	.word	0x00000040
 bc0:	00000fc8 	.word	0x00000fc8
 bc4:	00000020 	.word	0x00000020
