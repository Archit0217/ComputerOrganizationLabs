
P:/G41_Lab3/main.axf:     file format elf32-littlearm


Disassembly of section .vectors:

00000000 <__cs3_interrupt_vector>:
   0:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  10:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  20:	e4 0e 00 00 f0 0e 00 00 fc 0e 00 00 08 0f 00 00     ................
  30:	14 0f 00 00 24 13 00 00 8c 0d 00 00 20 0f 00 00     ....$....... ...

Disassembly of section .text:

00000040 <__cs3_reset_generic>:
      40:	ea000026 	b	e0 <__cs3_start_asm_sim>

00000044 <__cs3_start_c>:
      44:	e59f608c 	ldr	r6, [pc, #140]	; d8 <__cs3_start_c+0x94>
      48:	e3560000 	cmp	r6, #0
      4c:	e92d4080 	push	{r7, lr}
      50:	e2466001 	sub	r6, r6, #1
      54:	0a00001e 	beq	d4 <__cs3_start_c+0x90>
      58:	e59f507c 	ldr	r5, [pc, #124]	; dc <__cs3_start_c+0x98>
      5c:	e3a00000 	mov	r0, #0
      60:	e3a01000 	mov	r1, #0
      64:	e515200c 	ldr	r2, [r5, #-12]
      68:	e515e010 	ldr	lr, [r5, #-16]
      6c:	e5154008 	ldr	r4, [r5, #-8]
      70:	e15e0002 	cmp	lr, r2
      74:	00822004 	addeq	r2, r2, r4
      78:	0a000009 	beq	a4 <__cs3_start_c+0x60>
      7c:	e3540000 	cmp	r4, #0
      80:	0a000007 	beq	a4 <__cs3_start_c+0x60>
      84:	e1a07002 	mov	r7, r2
      88:	e1a0c002 	mov	r12, r2
      8c:	e8be000c 	ldm	lr!, {r2, r3}
      90:	e8ac000c 	stmia	r12!, {r2, r3}
      94:	e067300c 	rsb	r3, r7, r12
      98:	e1540003 	cmp	r4, r3
      9c:	e1a0200c 	mov	r2, r12
      a0:	1afffff9 	bne	8c <__cs3_start_c+0x48>
      a4:	e515e004 	ldr	lr, [r5, #-4]
      a8:	e35e0000 	cmp	lr, #0
      ac:	11a03002 	movne	r3, r2
      b0:	0a000003 	beq	c4 <__cs3_start_c+0x80>
      b4:	e8a30003 	stmia	r3!, {r0, r1}
      b8:	e062c003 	rsb	r12, r2, r3
      bc:	e15e000c 	cmp	lr, r12
      c0:	1afffffb 	bne	b4 <__cs3_start_c+0x70>
      c4:	e2466001 	sub	r6, r6, #1
      c8:	e3760001 	cmn	r6, #1
      cc:	e2855014 	add	r5, r5, #20
      d0:	1affffe3 	bne	64 <__cs3_start_c+0x20>
      d4:	eb000479 	bl	12c0 <__cs3_premain>
      d8:	00000001 	.word	0x00000001
      dc:	00001414 	.word	0x00001414

000000e0 <__cs3_start_asm_sim>:
      e0:	e28f103c 	add	r1, pc, #60	; 0x3c
      e4:	e3a00016 	mov	r0, #22
      e8:	ef123456 	svc	0x00123456
      ec:	e3500000 	cmp	r0, #0
      f0:	ba000008 	blt	118 <__cs3_start_asm_sim+0x38>
      f4:	e59f2028 	ldr	r2, [pc, #40]	; 124 <__cs3_heap_start_ptr>
      f8:	e59fd01c 	ldr	sp, [pc, #28]	; 11c <__cs3_start_asm_sim+0x3c>
      fc:	e5920008 	ldr	r0, [r2, #8]
     100:	e3500000 	cmp	r0, #0
     104:	11a0d000 	movne	sp, r0
     108:	e59f1010 	ldr	r1, [pc, #16]	; 120 <__cs3_start_asm_sim+0x40>
     10c:	e5920004 	ldr	r0, [r2, #4]
     110:	e3500000 	cmp	r0, #0
     114:	15810000 	strne	r0, [r1]
     118:	eaffffc9 	b	44 <__cs3_start_c>
     11c:	3ffffff8 	.word	0x3ffffff8
     120:	00001850 	.word	0x00001850

00000124 <__cs3_heap_start_ptr>:
     124:	00001878 	.word	0x00001878

00000128 <_start>:
     128:	e51fd000 	ldr	sp, [pc, #-0]	; 130 <_start+0x8>
     12c:	eaffffc4 	b	44 <__cs3_start_c>
     130:	3ffffff8 	.word	0x3ffffff8

00000134 <deregister_tm_clones>:
     134:	e92d4008 	push	{r3, lr}
     138:	e59f002c 	ldr	r0, [pc, #44]	; 16c <deregister_tm_clones+0x38>
     13c:	e59f302c 	ldr	r3, [pc, #44]	; 170 <deregister_tm_clones+0x3c>
     140:	e0603003 	rsb	r3, r0, r3
     144:	e3530006 	cmp	r3, #6
     148:	8a000001 	bhi	154 <deregister_tm_clones+0x20>
     14c:	e8bd4008 	pop	{r3, lr}
     150:	e12fff1e 	bx	lr
     154:	e59f3018 	ldr	r3, [pc, #24]	; 174 <deregister_tm_clones+0x40>
     158:	e3530000 	cmp	r3, #0
     15c:	0afffffa 	beq	14c <deregister_tm_clones+0x18>
     160:	e1a0e00f 	mov	lr, pc
     164:	e12fff13 	bx	r3
     168:	eafffff7 	b	14c <deregister_tm_clones+0x18>
     16c:	00001858 	.word	0x00001858
     170:	0000185b 	.word	0x0000185b
     174:	00000000 	.word	0x00000000

00000178 <register_tm_clones>:
     178:	e92d4008 	push	{r3, lr}
     17c:	e59f0034 	ldr	r0, [pc, #52]	; 1b8 <register_tm_clones+0x40>
     180:	e59f3034 	ldr	r3, [pc, #52]	; 1bc <register_tm_clones+0x44>
     184:	e0603003 	rsb	r3, r0, r3
     188:	e1a03143 	asr	r3, r3, #2
     18c:	e0833fa3 	add	r3, r3, r3, lsr #31
     190:	e1b010c3 	asrs	r1, r3, #1
     194:	1a000001 	bne	1a0 <register_tm_clones+0x28>
     198:	e8bd4008 	pop	{r3, lr}
     19c:	e12fff1e 	bx	lr
     1a0:	e59f2018 	ldr	r2, [pc, #24]	; 1c0 <register_tm_clones+0x48>
     1a4:	e3520000 	cmp	r2, #0
     1a8:	0afffffa 	beq	198 <register_tm_clones+0x20>
     1ac:	e1a0e00f 	mov	lr, pc
     1b0:	e12fff12 	bx	r2
     1b4:	eafffff7 	b	198 <register_tm_clones+0x20>
     1b8:	00001858 	.word	0x00001858
     1bc:	00001858 	.word	0x00001858
     1c0:	00000000 	.word	0x00000000

000001c4 <__do_global_dtors_aux>:
     1c4:	e92d4010 	push	{r4, lr}
     1c8:	e59f402c 	ldr	r4, [pc, #44]	; 1fc <__do_global_dtors_aux+0x38>
     1cc:	e5d43000 	ldrb	r3, [r4]
     1d0:	e3530000 	cmp	r3, #0
     1d4:	1a000006 	bne	1f4 <__do_global_dtors_aux+0x30>
     1d8:	ebffffd5 	bl	134 <deregister_tm_clones>
     1dc:	e59f301c 	ldr	r3, [pc, #28]	; 200 <__do_global_dtors_aux+0x3c>
     1e0:	e3530000 	cmp	r3, #0
     1e4:	159f0018 	ldrne	r0, [pc, #24]	; 204 <__do_global_dtors_aux+0x40>
     1e8:	1320f000 	nopne	{0}
     1ec:	e3a03001 	mov	r3, #1
     1f0:	e5c43000 	strb	r3, [r4]
     1f4:	e8bd4010 	pop	{r4, lr}
     1f8:	e12fff1e 	bx	lr
     1fc:	00001858 	.word	0x00001858
     200:	00000000 	.word	0x00000000
     204:	000013b0 	.word	0x000013b0

00000208 <frame_dummy>:
     208:	e92d4008 	push	{r3, lr}
     20c:	e59f3034 	ldr	r3, [pc, #52]	; 248 <frame_dummy+0x40>
     210:	e3530000 	cmp	r3, #0
     214:	159f0030 	ldrne	r0, [pc, #48]	; 24c <frame_dummy+0x44>
     218:	159f1030 	ldrne	r1, [pc, #48]	; 250 <frame_dummy+0x48>
     21c:	1320f000 	nopne	{0}
     220:	e59f002c 	ldr	r0, [pc, #44]	; 254 <frame_dummy+0x4c>
     224:	e5903000 	ldr	r3, [r0]
     228:	e3530000 	cmp	r3, #0
     22c:	0a000003 	beq	240 <frame_dummy+0x38>
     230:	e59f3020 	ldr	r3, [pc, #32]	; 258 <frame_dummy+0x50>
     234:	e3530000 	cmp	r3, #0
     238:	11a0e00f 	movne	lr, pc
     23c:	112fff13 	bxne	r3
     240:	e8bd4008 	pop	{r3, lr}
     244:	eaffffcb 	b	178 <register_tm_clones>
     248:	00000000 	.word	0x00000000
     24c:	000013b0 	.word	0x000013b0
     250:	0000185c 	.word	0x0000185c
     254:	00001418 	.word	0x00001418
     258:	00000000 	.word	0x00000000

0000025c <main>:



// Part 3 starts here.

int main(){
     25c:	e92d4800 	push	{r11, lr}
     260:	e28db004 	add	r11, sp, #4
     264:	e24dd048 	sub	sp, sp, #72	; 0x48
	//Enable interupts for push buttons and hps timer 0
	int_setup(2, (int []) {73, 199}); // The first integer denotes number of ID's to interrupt. Second array contains the interrupt ID's
     268:	e30133b4 	movw	r3, #5044	; 0x13b4
     26c:	e3403000 	movt	r3, #0
     270:	e24b2038 	sub	r2, r11, #56	; 0x38
     274:	e8930003 	ldm	r3, {r0, r1}
     278:	e8820003 	stm	r2, {r0, r1}
     27c:	e24b3038 	sub	r3, r11, #56	; 0x38
     280:	e3a00002 	mov	r0, #2
     284:	e1a01003 	mov	r1, r3
     288:	eb000333 	bl	f5c <int_setup>

	//Enable interrupts for pushbuttons
	enable_PB_INT_ASM(PB0 | PB1 | PB2);	//so that the pushbuttons actually interrupt
     28c:	e3a00007 	mov	r0, #7
     290:	eb000195 	bl	8ec <enable_PB_INT_ASM>
	HPS_TIM_config_t hps_tim;
	hps_tim.tim = TIM0;
     294:	e3a03001 	mov	r3, #1
     298:	e54b304c 	strb	r3, [r11, #-76]	; 0xffffffb4
	hps_tim.timeout = 10000; //This is equal to 10ms
     29c:	e3023710 	movw	r3, #10000	; 0x2710
     2a0:	e50b3048 	str	r3, [r11, #-72]	; 0xffffffb8
	hps_tim.LD_en = 1;
     2a4:	e3a03001 	mov	r3, #1
     2a8:	e50b3044 	str	r3, [r11, #-68]	; 0xffffffbc
	hps_tim.INT_en = 1;
     2ac:	e3a03001 	mov	r3, #1
     2b0:	e50b3040 	str	r3, [r11, #-64]	; 0xffffffc0
	hps_tim.enable = 1;
     2b4:	e3a03001 	mov	r3, #1
     2b8:	e50b303c 	str	r3, [r11, #-60]	; 0xffffffc4




	int overall0 = 0; 
     2bc:	e3a03000 	mov	r3, #0
     2c0:	e50b3008 	str	r3, [r11, #-8]
	int ms=0;
     2c4:	e3a03000 	mov	r3, #0
     2c8:	e50b3010 	str	r3, [r11, #-16]
	int s = 0; //couters for seconds
     2cc:	e3a03000 	mov	r3, #0
     2d0:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
	int mins = 0; //counters for minutes
     2d4:	e3a03000 	mov	r3, #0
     2d8:	e50b3018 	str	r3, [r11, #-24]	; 0xffffffe8
	int hex0 = 0; 
     2dc:	e3a03000 	mov	r3, #0
     2e0:	e50b301c 	str	r3, [r11, #-28]	; 0xffffffe4
	int hex1 = 0; 
     2e4:	e3a03000 	mov	r3, #0
     2e8:	e50b3020 	str	r3, [r11, #-32]	; 0xffffffe0
	int hex2 = 0; 
     2ec:	e3a03000 	mov	r3, #0
     2f0:	e50b3024 	str	r3, [r11, #-36]	; 0xffffffdc
	int hex3 = 0; 
     2f4:	e3a03000 	mov	r3, #0
     2f8:	e50b3028 	str	r3, [r11, #-40]	; 0xffffffd8
	int hex4 = 0; 
     2fc:	e3a03000 	mov	r3, #0
     300:	e50b302c 	str	r3, [r11, #-44]	; 0xffffffd4
	int hex5 = 0; 
     304:	e3a03000 	mov	r3, #0
     308:	e50b3030 	str	r3, [r11, #-48]	; 0xffffffd0
	int start=1;
     30c:	e3a03001 	mov	r3, #1
     310:	e50b300c 	str	r3, [r11, #-12]
     314:	ea000000 	b	31c <main+0xc0>
					
					}
				//overall0++;	
				}
			//overall0++;
	}
     318:	e1a00000 	nop			; (mov r0, r0)
	int hex4 = 0; 
	int hex5 = 0; 
	int start=1;
	while(1) {
		//Check if interrupt for pushbuttons occurs
		if (pb_int_flag >=0) { // interrupt flag
     31c:	e3003aec 	movw	r3, #2796	; 0xaec
     320:	e3403000 	movt	r3, #0
     324:	e5933000 	ldr	r3, [r3]
     328:	e3530000 	cmp	r3, #0
     32c:	ba000061 	blt	4b8 <main+0x25c>
			//if the interrupt is button 0: start timer
			if (pb_int_flag == 0) { 
     330:	e3003aec 	movw	r3, #2796	; 0xaec
     334:	e3403000 	movt	r3, #0
     338:	e5933000 	ldr	r3, [r3]
     33c:	e3530000 	cmp	r3, #0
     340:	1a00000f 	bne	384 <main+0x128>
				hps_tim.LD_en = 1;	// starts timer
     344:	e3a03001 	mov	r3, #1
     348:	e50b3044 	str	r3, [r11, #-68]	; 0xffffffbc
				hps_tim.INT_en = 1;
     34c:	e3a03001 	mov	r3, #1
     350:	e50b3040 	str	r3, [r11, #-64]	; 0xffffffc0
				hps_tim.enable = 1;
     354:	e3a03001 	mov	r3, #1
     358:	e50b303c 	str	r3, [r11, #-60]	; 0xffffffc4
				HPS_TIM_config_ASM(&hps_tim);
     35c:	e24b304c 	sub	r3, r11, #76	; 0x4c
     360:	e1a00003 	mov	r0, r3
     364:	eb00017d 	bl	960 <HPS_TIM_config_ASM>
				pb_int_flag = 6 ;
     368:	e3003aec 	movw	r3, #2796	; 0xaec
     36c:	e3403000 	movt	r3, #0
     370:	e3a02006 	mov	r2, #6
     374:	e5832000 	str	r2, [r3]
				start =1;	
     378:	e3a03001 	mov	r3, #1
     37c:	e50b300c 	str	r3, [r11, #-12]
     380:	ea00004c 	b	4b8 <main+0x25c>
			} 
			//if the interrupt is button 1: stop timer
			else if (pb_int_flag == 1) {
     384:	e3003aec 	movw	r3, #2796	; 0xaec
     388:	e3403000 	movt	r3, #0
     38c:	e5933000 	ldr	r3, [r3]
     390:	e3530001 	cmp	r3, #1
     394:	1a00000f 	bne	3d8 <main+0x17c>
						hps_tim.LD_en = 0;
     398:	e3a03000 	mov	r3, #0
     39c:	e50b3044 	str	r3, [r11, #-68]	; 0xffffffbc
						hps_tim.INT_en = 0;
     3a0:	e3a03000 	mov	r3, #0
     3a4:	e50b3040 	str	r3, [r11, #-64]	; 0xffffffc0
						hps_tim.enable = 0;
     3a8:	e3a03000 	mov	r3, #0
     3ac:	e50b303c 	str	r3, [r11, #-60]	; 0xffffffc4
						HPS_TIM_config_ASM(&hps_tim);
     3b0:	e24b304c 	sub	r3, r11, #76	; 0x4c
     3b4:	e1a00003 	mov	r0, r3
     3b8:	eb000168 	bl	960 <HPS_TIM_config_ASM>
						pb_int_flag = 6 ;
     3bc:	e3003aec 	movw	r3, #2796	; 0xaec
     3c0:	e3403000 	movt	r3, #0
     3c4:	e3a02006 	mov	r2, #6
     3c8:	e5832000 	str	r2, [r3]
						start=0;				
     3cc:	e3a03000 	mov	r3, #0
     3d0:	e50b300c 	str	r3, [r11, #-12]
     3d4:	ea000037 	b	4b8 <main+0x25c>
			} 
			//if the interrupt is button 2: reset and stop the timer
			else if (pb_int_flag == 2) { 
     3d8:	e3003aec 	movw	r3, #2796	; 0xaec
     3dc:	e3403000 	movt	r3, #0
     3e0:	e5933000 	ldr	r3, [r3]
     3e4:	e3530002 	cmp	r3, #2
     3e8:	1a000032 	bne	4b8 <main+0x25c>
				hps_tim.LD_en = 0;
     3ec:	e3a03000 	mov	r3, #0
     3f0:	e50b3044 	str	r3, [r11, #-68]	; 0xffffffbc
				hps_tim.INT_en = 0;
     3f4:	e3a03000 	mov	r3, #0
     3f8:	e50b3040 	str	r3, [r11, #-64]	; 0xffffffc0
				hps_tim.enable = 0;
     3fc:	e3a03000 	mov	r3, #0
     400:	e50b303c 	str	r3, [r11, #-60]	; 0xffffffc4
				HPS_TIM_config_ASM(&hps_tim);
     404:	e24b304c 	sub	r3, r11, #76	; 0x4c
     408:	e1a00003 	mov	r0, r3
     40c:	eb000153 	bl	960 <HPS_TIM_config_ASM>
				HEX_write_ASM(HEX0, 0);
     410:	e3a00001 	mov	r0, #1
     414:	e3a01000 	mov	r1, #0
     418:	eb0000ca 	bl	748 <HEX_write_ASM>
			HEX_write_ASM(HEX1, 0);
     41c:	e3a00002 	mov	r0, #2
     420:	e3a01000 	mov	r1, #0
     424:	eb0000c7 	bl	748 <HEX_write_ASM>
			HEX_write_ASM(HEX2, 0);
     428:	e3a00004 	mov	r0, #4
     42c:	e3a01000 	mov	r1, #0
     430:	eb0000c4 	bl	748 <HEX_write_ASM>
			HEX_write_ASM(HEX3, 0);
     434:	e3a00008 	mov	r0, #8
     438:	e3a01000 	mov	r1, #0
     43c:	eb0000c1 	bl	748 <HEX_write_ASM>
			HEX_write_ASM(HEX4, 0);
     440:	e3a00010 	mov	r0, #16
     444:	e3a01000 	mov	r1, #0
     448:	eb0000be 	bl	748 <HEX_write_ASM>
			HEX_write_ASM(HEX5, 0);	
     44c:	e3a00020 	mov	r0, #32
     450:	e3a01000 	mov	r1, #0
     454:	eb0000bb 	bl	748 <HEX_write_ASM>
			overall0 = 0;
     458:	e3a03000 	mov	r3, #0
     45c:	e50b3008 	str	r3, [r11, #-8]
			ms=0;
     460:	e3a03000 	mov	r3, #0
     464:	e50b3010 	str	r3, [r11, #-16]
			s = 0;
     468:	e3a03000 	mov	r3, #0
     46c:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
			mins = 0;
     470:	e3a03000 	mov	r3, #0
     474:	e50b3018 	str	r3, [r11, #-24]	; 0xffffffe8
			hex0 = 0;
     478:	e3a03000 	mov	r3, #0
     47c:	e50b301c 	str	r3, [r11, #-28]	; 0xffffffe4
			hex1 = 0;
     480:	e3a03000 	mov	r3, #0
     484:	e50b3020 	str	r3, [r11, #-32]	; 0xffffffe0
			hex2 = 0;
     488:	e3a03000 	mov	r3, #0
     48c:	e50b3024 	str	r3, [r11, #-36]	; 0xffffffdc
			hex3 = 0;
     490:	e3a03000 	mov	r3, #0
     494:	e50b3028 	str	r3, [r11, #-40]	; 0xffffffd8
			hex4 = 0;
     498:	e3a03000 	mov	r3, #0
     49c:	e50b302c 	str	r3, [r11, #-44]	; 0xffffffd4
			hex5 = 0;
     4a0:	e3a03000 	mov	r3, #0
     4a4:	e50b3030 	str	r3, [r11, #-48]	; 0xffffffd0
			pb_int_flag = 6 ;	//Resets the interrupt flag
     4a8:	e3003aec 	movw	r3, #2796	; 0xaec
     4ac:	e3403000 	movt	r3, #0
     4b0:	e3a02006 	mov	r2, #6
     4b4:	e5832000 	str	r2, [r3]
			}
		
		}
		if(start == 1){ //This is the main body of the counter
     4b8:	e51b300c 	ldr	r3, [r11, #-12]
     4bc:	e3530001 	cmp	r3, #1
     4c0:	1affff94 	bne	318 <main+0xbc>

				if(hps_tim0_int_flag){ // returns true once 10ms are over, causing status register to become one
     4c4:	e3003ae8 	movw	r3, #2792	; 0xae8
     4c8:	e3403000 	movt	r3, #0
     4cc:	e5933000 	ldr	r3, [r3]
     4d0:	e3530000 	cmp	r3, #0
     4d4:	0affff8f 	beq	318 <main+0xbc>

					overall0++;
     4d8:	e51b3008 	ldr	r3, [r11, #-8]
     4dc:	e2833001 	add	r3, r3, #1
     4e0:	e50b3008 	str	r3, [r11, #-8]
					hps_tim0_int_flag=0; // restores F and S bit for timer to begin again
     4e4:	e3003ae8 	movw	r3, #2792	; 0xae8
     4e8:	e3403000 	movt	r3, #0
     4ec:	e3a02000 	mov	r2, #0
     4f0:	e5832000 	str	r2, [r3]
					ms=overall0%100;
     4f4:	e51b3008 	ldr	r3, [r11, #-8]
     4f8:	e308251f 	movw	r2, #34079	; 0x851f
     4fc:	e34521eb 	movt	r2, #20971	; 0x51eb
     500:	e0c21392 	smull	r1, r2, r2, r3
     504:	e1a012c2 	asr	r1, r2, #5
     508:	e1a02fc3 	asr	r2, r3, #31
     50c:	e0622001 	rsb	r2, r2, r1
     510:	e3a01064 	mov	r1, #100	; 0x64
     514:	e0020291 	mul	r2, r1, r2
     518:	e0623003 	rsb	r3, r2, r3
     51c:	e50b3010 	str	r3, [r11, #-16]
					s=(overall0/100)%60;
     520:	e51b2008 	ldr	r2, [r11, #-8]
     524:	e308351f 	movw	r3, #34079	; 0x851f
     528:	e34531eb 	movt	r3, #20971	; 0x51eb
     52c:	e0c31293 	smull	r1, r3, r3, r2
     530:	e1a012c3 	asr	r1, r3, #5
     534:	e1a03fc2 	asr	r3, r2, #31
     538:	e0632001 	rsb	r2, r3, r1
     53c:	e3083889 	movw	r3, #34953	; 0x8889
     540:	e3483888 	movt	r3, #34952	; 0x8888
     544:	e0c31293 	smull	r1, r3, r3, r2
     548:	e0833002 	add	r3, r3, r2
     54c:	e1a012c3 	asr	r1, r3, #5
     550:	e1a03fc2 	asr	r3, r2, #31
     554:	e0631001 	rsb	r1, r3, r1
     558:	e1a03001 	mov	r3, r1
     55c:	e1a03203 	lsl	r3, r3, #4
     560:	e0613003 	rsb	r3, r1, r3
     564:	e1a03103 	lsl	r3, r3, #2
     568:	e0633002 	rsb	r3, r3, r2
     56c:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
					mins=((overall0/6000)%60);
     570:	e51b2008 	ldr	r2, [r11, #-8]
     574:	e30139f1 	movw	r3, #6641	; 0x19f1
     578:	e3403576 	movt	r3, #1398	; 0x576
     57c:	e0c31293 	smull	r1, r3, r3, r2
     580:	e1a013c3 	asr	r1, r3, #7
     584:	e1a03fc2 	asr	r3, r2, #31
     588:	e0632001 	rsb	r2, r3, r1
     58c:	e3083889 	movw	r3, #34953	; 0x8889
     590:	e3483888 	movt	r3, #34952	; 0x8888
     594:	e0c31293 	smull	r1, r3, r3, r2
     598:	e0833002 	add	r3, r3, r2
     59c:	e1a012c3 	asr	r1, r3, #5
     5a0:	e1a03fc2 	asr	r3, r2, #31
     5a4:	e0631001 	rsb	r1, r3, r1
     5a8:	e1a03001 	mov	r3, r1
     5ac:	e1a03203 	lsl	r3, r3, #4
     5b0:	e0613003 	rsb	r3, r1, r3
     5b4:	e1a03103 	lsl	r3, r3, #2
     5b8:	e0633002 	rsb	r3, r3, r2
     5bc:	e50b3018 	str	r3, [r11, #-24]	; 0xffffffe8
					hex0=ms%10;
     5c0:	e51b2010 	ldr	r2, [r11, #-16]
     5c4:	e3063667 	movw	r3, #26215	; 0x6667
     5c8:	e3463666 	movt	r3, #26214	; 0x6666
     5cc:	e0c31293 	smull	r1, r3, r3, r2
     5d0:	e1a01143 	asr	r1, r3, #2
     5d4:	e1a03fc2 	asr	r3, r2, #31
     5d8:	e0631001 	rsb	r1, r3, r1
     5dc:	e1a03001 	mov	r3, r1
     5e0:	e1a03103 	lsl	r3, r3, #2
     5e4:	e0833001 	add	r3, r3, r1
     5e8:	e1a03083 	lsl	r3, r3, #1
     5ec:	e0633002 	rsb	r3, r3, r2
     5f0:	e50b301c 	str	r3, [r11, #-28]	; 0xffffffe4
					hex1=ms/10;
     5f4:	e51b2010 	ldr	r2, [r11, #-16]
     5f8:	e3063667 	movw	r3, #26215	; 0x6667
     5fc:	e3463666 	movt	r3, #26214	; 0x6666
     600:	e0c31293 	smull	r1, r3, r3, r2
     604:	e1a01143 	asr	r1, r3, #2
     608:	e1a03fc2 	asr	r3, r2, #31
     60c:	e0633001 	rsb	r3, r3, r1
     610:	e50b3020 	str	r3, [r11, #-32]	; 0xffffffe0
					hex2=s%10;
     614:	e51b2014 	ldr	r2, [r11, #-20]	; 0xffffffec
     618:	e3063667 	movw	r3, #26215	; 0x6667
     61c:	e3463666 	movt	r3, #26214	; 0x6666
     620:	e0c31293 	smull	r1, r3, r3, r2
     624:	e1a01143 	asr	r1, r3, #2
     628:	e1a03fc2 	asr	r3, r2, #31
     62c:	e0631001 	rsb	r1, r3, r1
     630:	e1a03001 	mov	r3, r1
     634:	e1a03103 	lsl	r3, r3, #2
     638:	e0833001 	add	r3, r3, r1
     63c:	e1a03083 	lsl	r3, r3, #1
     640:	e0633002 	rsb	r3, r3, r2
     644:	e50b3024 	str	r3, [r11, #-36]	; 0xffffffdc
					hex3=s/10;
     648:	e51b2014 	ldr	r2, [r11, #-20]	; 0xffffffec
     64c:	e3063667 	movw	r3, #26215	; 0x6667
     650:	e3463666 	movt	r3, #26214	; 0x6666
     654:	e0c31293 	smull	r1, r3, r3, r2
     658:	e1a01143 	asr	r1, r3, #2
     65c:	e1a03fc2 	asr	r3, r2, #31
     660:	e0633001 	rsb	r3, r3, r1
     664:	e50b3028 	str	r3, [r11, #-40]	; 0xffffffd8
					hex4=mins%10;
     668:	e51b2018 	ldr	r2, [r11, #-24]	; 0xffffffe8
     66c:	e3063667 	movw	r3, #26215	; 0x6667
     670:	e3463666 	movt	r3, #26214	; 0x6666
     674:	e0c31293 	smull	r1, r3, r3, r2
     678:	e1a01143 	asr	r1, r3, #2
     67c:	e1a03fc2 	asr	r3, r2, #31
     680:	e0631001 	rsb	r1, r3, r1
     684:	e1a03001 	mov	r3, r1
     688:	e1a03103 	lsl	r3, r3, #2
     68c:	e0833001 	add	r3, r3, r1
     690:	e1a03083 	lsl	r3, r3, #1
     694:	e0633002 	rsb	r3, r3, r2
     698:	e50b302c 	str	r3, [r11, #-44]	; 0xffffffd4
					hex5=mins/10;
     69c:	e51b2018 	ldr	r2, [r11, #-24]	; 0xffffffe8
     6a0:	e3063667 	movw	r3, #26215	; 0x6667
     6a4:	e3463666 	movt	r3, #26214	; 0x6666
     6a8:	e0c31293 	smull	r1, r3, r3, r2
     6ac:	e1a01143 	asr	r1, r3, #2
     6b0:	e1a03fc2 	asr	r3, r2, #31
     6b4:	e0633001 	rsb	r3, r3, r1
     6b8:	e50b3030 	str	r3, [r11, #-48]	; 0xffffffd0
					HEX_write_ASM(HEX0, hex0);
     6bc:	e51b301c 	ldr	r3, [r11, #-28]	; 0xffffffe4
     6c0:	e6ef3073 	uxtb	r3, r3
     6c4:	e3a00001 	mov	r0, #1
     6c8:	e1a01003 	mov	r1, r3
     6cc:	eb00001d 	bl	748 <HEX_write_ASM>
					HEX_write_ASM(HEX1, hex1);
     6d0:	e51b3020 	ldr	r3, [r11, #-32]	; 0xffffffe0
     6d4:	e6ef3073 	uxtb	r3, r3
     6d8:	e3a00002 	mov	r0, #2
     6dc:	e1a01003 	mov	r1, r3
     6e0:	eb000018 	bl	748 <HEX_write_ASM>
					HEX_write_ASM(HEX2, hex2);
     6e4:	e51b3024 	ldr	r3, [r11, #-36]	; 0xffffffdc
     6e8:	e6ef3073 	uxtb	r3, r3
     6ec:	e3a00004 	mov	r0, #4
     6f0:	e1a01003 	mov	r1, r3
     6f4:	eb000013 	bl	748 <HEX_write_ASM>
					HEX_write_ASM(HEX3, hex3);
     6f8:	e51b3028 	ldr	r3, [r11, #-40]	; 0xffffffd8
     6fc:	e6ef3073 	uxtb	r3, r3
     700:	e3a00008 	mov	r0, #8
     704:	e1a01003 	mov	r1, r3
     708:	eb00000e 	bl	748 <HEX_write_ASM>
					HEX_write_ASM(HEX4, hex4);
     70c:	e51b302c 	ldr	r3, [r11, #-44]	; 0xffffffd4
     710:	e6ef3073 	uxtb	r3, r3
     714:	e3a00010 	mov	r0, #16
     718:	e1a01003 	mov	r1, r3
     71c:	eb000009 	bl	748 <HEX_write_ASM>
					HEX_write_ASM(HEX5, hex5);	
     720:	e51b3030 	ldr	r3, [r11, #-48]	; 0xffffffd0
     724:	e6ef3073 	uxtb	r3, r3
     728:	e3a00020 	mov	r0, #32
     72c:	e1a01003 	mov	r1, r3
     730:	eb000004 	bl	748 <HEX_write_ASM>
					
					}
				//overall0++;	
				}
			//overall0++;
	}
     734:	eafffef7 	b	318 <main+0xbc>

00000738 <HEX_clear_ASM>:
	.global HEX_clear_ASM
	.global HEX_flood_ASM
	.global HEX_write_ASM

HEX_clear_ASM:			// turn off everything (only for requested ones)
	LDR R2, ZEROS		// load 00000000 into R2
     738:	e59f20b0 	ldr	r2, [pc, #176]	; 7f0 <ZEROS>
	B RUN
     73c:	ea000006 	b	75c <RUN>

00000740 <HEX_flood_ASM>:

HEX_flood_ASM:			// light up everything similarly
	LDR R2, ONES		// load 11111111 into R1
     740:	e59f20ac 	ldr	r2, [pc, #172]	; 7f4 <ONES>
	B RUN
     744:	ea000004 	b	75c <RUN>

00000748 <HEX_write_ASM>:

HEX_write_ASM:			// display the corresponding hexadecimal number
	LDR R2, =LIGHTS		// hold address of first encoded light sequence
     748:	e59f20e8 	ldr	r2, [pc, #232]	; 838 <LIGHTS+0x40>
	MOV R3, #4			// multiple for use on next line
     74c:	e3a03004 	mov	r3, #4
	MUL R3, R3, R1      // multiply input shift by four
     750:	e0030193 	mul	r3, r3, r1
	LDR R2, [R2, R3]	// put appropriate 1 byte encoded light sequence into R2, using base address + shift according to 4*input
     754:	e7922003 	ldr	r2, [r2, r3]
	B RUN
     758:	eaffffff 	b	75c <RUN>

0000075c <RUN>:

RUN:
	PUSH {R0}
     75c:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
	PUSH {LR}
     760:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
	MOV R8, #32			// R8 holds the current power of 2 that is being used for comparison
     764:	e3a08020 	mov	r8, #32
	MOV R9, #1			// R9 holds the memory offset counter
     768:	e3a09001 	mov	r9, #1
	ROR R2, #24			// shift input value to be aligned with 2nd bit (in accordance with offset counter)
     76c:	e1a02c62 	ror	r2, r2, #24
	MOV R6, #31			// load binary string 00000000 00000000 00000000 00011111, to be used to reduce the input string
     770:	e3a0601f 	mov	r6, #31
	LDR R10, =HEX_4to5	// R10 holds the starting address of the area in memory
     774:	e59fa0c0 	ldr	r10, [pc, #192]	; 83c <LIGHTS+0x44>

00000778 <LOOP>:
	
LOOP:
	CMP R8, #0			// check if power-of-2 counter has reached zero
     778:	e3580000 	cmp	r8, #0
	BEQ	END				// if so, branch to end
     77c:	0a000011 	beq	7c8 <END>
	CMP R8, #8			// check if power-of-2 counter has reached 8, meaning it's on HEX0-HEX4
     780:	e3580008 	cmp	r8, #8
	BEQ N				// if on threshold, go to 'change values' block (N)
     784:	0a000012 	beq	7d4 <N>

00000788 <A>:
A: 	CMP R0, R8			// check if input value >= power-of-2 counter
     788:	e1500008 	cmp	r0, r8
	BLT S				// if no, the leftmost bit must be zero => skip to incrementing loop (S)
     78c:	ba000007 	blt	7b0 <S>
	
	LDR R7, =CLEARING	// get starting address of clearing word
     790:	e59f70a8 	ldr	r7, [pc, #168]	; 840 <LIGHTS+0x48>
	MOV R3, #4			// multiple for use on next line
     794:	e3a03004 	mov	r3, #4
	MUL R3, R9, R3		// multiply offset by four
     798:	e0030399 	mul	r3, r9, r3
	LDR R7, [R7, R3]	// get some zeros ready in the correct byte according to the current shift
     79c:	e7977003 	ldr	r7, [r7, r3]
	LDR R5, [R10]		// load the current value in memory into a register
     7a0:	e59a5000 	ldr	r5, [r10]
	AND R5, R5, R7		// clear the required bits
     7a4:	e0055007 	and	r5, r5, r7
	ORR R5, R5, R2		// enter the required bits			
     7a8:	e1855002 	orr	r5, r5, r2
	STR R5, [R10]		// store back to memory
     7ac:	e58a5000 	str	r5, [r10]

000007b0 <S>:

S:  LSR R8, #1			// decrease power-of-2 counter by one power of 2
     7b0:	e1a080a8 	lsr	r8, r8, #1
	SUB R9, R9, #1		// decrease memory offset counter by one
     7b4:	e2499001 	sub	r9, r9, #1
	ROR R2, #8			// shift input value one byte right (alignment according to offset counter)
     7b8:	e1a02462 	ror	r2, r2, #8
	AND R0, R6			// remove leftmost zero
     7bc:	e0000006 	and	r0, r0, r6
	LSR R6, #1			// remove leftmost 1 from removal string
     7c0:	e1a060a6 	lsr	r6, r6, #1
	B LOOP
     7c4:	eaffffeb 	b	778 <LOOP>

000007c8 <END>:


END:	POP {LR}
     7c8:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
		POP {R0}
     7cc:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
		BX LR			// leave
     7d0:	e12fff1e 	bx	lr

000007d4 <N>:

N:	LDR R10, =HEX_0to3	// change to other memory location
     7d4:	e59fa068 	ldr	r10, [pc, #104]	; 844 <LIGHTS+0x4c>
	MOV R9, #3			// update memory offset counter
     7d8:	e3a09003 	mov	r9, #3
	// ROR R2, #8			// shift input value one byte right (alignment according to offset counter)
	B A					// go back
     7dc:	eaffffe9 	b	788 <A>

000007e0 <CLEARING>:
     7e0:	ffffff00 	.word	0xffffff00
     7e4:	ffff00ff 	.word	0xffff00ff
     7e8:	ff00ffff 	.word	0xff00ffff
     7ec:	00ffffff 	.word	0x00ffffff

000007f0 <ZEROS>:
     7f0:	00000000 	.word	0x00000000

000007f4 <ONES>:
     7f4:	000000ff 	.word	0x000000ff

000007f8 <LIGHTS>:
     7f8:	0000003f 	.word	0x0000003f
     7fc:	00000006 	.word	0x00000006
     800:	0000005b 	.word	0x0000005b
     804:	0000004f 	.word	0x0000004f
     808:	00000066 	.word	0x00000066
     80c:	0000006d 	.word	0x0000006d
     810:	0000007d 	.word	0x0000007d
     814:	00000007 	.word	0x00000007
     818:	0000007f 	.word	0x0000007f
     81c:	00000067 	.word	0x00000067
     820:	00000077 	.word	0x00000077
     824:	0000007c 	.word	0x0000007c
     828:	00000039 	.word	0x00000039
     82c:	0000005e 	.word	0x0000005e
     830:	00000079 	.word	0x00000079
     834:	00000071 	.word	0x00000071
HEX_flood_ASM:			// light up everything similarly
	LDR R2, ONES		// load 11111111 into R1
	B RUN

HEX_write_ASM:			// display the corresponding hexadecimal number
	LDR R2, =LIGHTS		// hold address of first encoded light sequence
     838:	000007f8 	.word	0x000007f8
	PUSH {LR}
	MOV R8, #32			// R8 holds the current power of 2 that is being used for comparison
	MOV R9, #1			// R9 holds the memory offset counter
	ROR R2, #24			// shift input value to be aligned with 2nd bit (in accordance with offset counter)
	MOV R6, #31			// load binary string 00000000 00000000 00000000 00011111, to be used to reduce the input string
	LDR R10, =HEX_4to5	// R10 holds the starting address of the area in memory
     83c:	ff200030 	.word	0xff200030
	CMP R8, #8			// check if power-of-2 counter has reached 8, meaning it's on HEX0-HEX4
	BEQ N				// if on threshold, go to 'change values' block (N)
A: 	CMP R0, R8			// check if input value >= power-of-2 counter
	BLT S				// if no, the leftmost bit must be zero => skip to incrementing loop (S)
	
	LDR R7, =CLEARING	// get starting address of clearing word
     840:	000007e0 	.word	0x000007e0

END:	POP {LR}
		POP {R0}
		BX LR			// leave

N:	LDR R10, =HEX_0to3	// change to other memory location
     844:	ff200020 	.word	0xff200020

00000848 <read_PB_data_ASM>:
		.global PB_clear_edgecap_ASM
		.global enable_PB_INT_ASM
		.global disable_PB_INT_ASM

read_PB_data_ASM:		// return a binary string, where the final 4 bits hold the status of the buttons (pressed or not)
	PUSH {LR}
     848:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
	LDR R1, =PUSH_data	// load the memory address from which we'll get the value
     84c:	e59f10d4 	ldr	r1, [pc, #212]	; 928 <disable_PB_INT_ASM+0x20>
	LDR R0, [R1]		// get the value and put it into R0
     850:	e5910000 	ldr	r0, [r1]
	POP {LR}
     854:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
	BX LR 				// leave
     858:	e12fff1e 	bx	lr

0000085c <PB_data_is_pressed_ASM>:

PB_data_is_pressed_ASM:	// check if the indicated buttons are pressed. If yes, return 1. Otherwise, return 0.
	PUSH {R1}
     85c:	e52d1004 	push	{r1}		; (str r1, [sp, #-4]!)
	PUSH {LR}
     860:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
	LDR R1, =PUSH_data	// load the memory address where the value is stored
     864:	e59f10bc 	ldr	r1, [pc, #188]	; 928 <disable_PB_INT_ASM+0x20>
	LDR R1, [R1]		// get the value and put it into R1
     868:	e5911000 	ldr	r1, [r1]
	CMP R0, R1			// check if the input string matches the string in memory
     86c:	e1500001 	cmp	r0, r1
	BEQ	O
     870:	0a000001 	beq	87c <O>
	MOV R0, #0			// if no, return false
     874:	e3a00000 	mov	r0, #0
	B E
     878:	ea000000 	b	880 <E>

0000087c <O>:
O:	MOV R0, #1			// if yes, return true
     87c:	e3a00001 	mov	r0, #1

00000880 <E>:
E:	POP {LR}
     880:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
	POP {R1}
     884:	e49d1004 	pop	{r1}		; (ldr r1, [sp], #4)
	BX LR 				// leave
     888:	e12fff1e 	bx	lr

0000088c <read_PB_edgecap_ASM>:

read_PB_edgecap_ASM:	// return a binary string, where the final 4 bits hold the edgecap bits
	PUSH {LR}
     88c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
	LDR R0, =PUSH_edge	// load the memory address from which we'll get the value
     890:	e59f0094 	ldr	r0, [pc, #148]	; 92c <disable_PB_INT_ASM+0x24>
	LDR R0, [R0]		// get the value and put it into R0 for return
     894:	e5900000 	ldr	r0, [r0]
	POP {LR}
     898:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
	BX LR 				// leave
     89c:	e12fff1e 	bx	lr

000008a0 <PB_edgecap_is_pressed_ASM>:

PB_edgecap_is_pressed_ASM:	// check if the indicated buttons are pressed. If yes, return 1. Otherwise, return 0.
	PUSH {R1}
     8a0:	e52d1004 	push	{r1}		; (str r1, [sp, #-4]!)
	PUSH {LR}
     8a4:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
	LDR R1, =PUSH_edge	// load the memory address where the value is stored
     8a8:	e59f107c 	ldr	r1, [pc, #124]	; 92c <disable_PB_INT_ASM+0x24>
	LDR R1, [R1]		// get the value and put it into R1
     8ac:	e5911000 	ldr	r1, [r1]
	CMP R0, R1			// check if the input string matches the string in memory
     8b0:	e1500001 	cmp	r0, r1
	BEQ	Z
     8b4:	0a000001 	beq	8c0 <Z>
	MOV R0, #0			// if no, return false
     8b8:	e3a00000 	mov	r0, #0
	B D
     8bc:	ea000000 	b	8c4 <D>

000008c0 <Z>:
Z:	MOV R0, #1			// if yes, return true
     8c0:	e3a00001 	mov	r0, #1

000008c4 <D>:
D:	POP {LR}
     8c4:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
	POP {R1}
     8c8:	e49d1004 	pop	{r1}		; (ldr r1, [sp], #4)
	BX LR 				// leave
     8cc:	e12fff1e 	bx	lr

000008d0 <PB_clear_edgecap_ASM>:

PB_clear_edgecap_ASM:	// write the input string into the edge capture memory location
						// no alterations required, since the input value is already the appropriate binary string
	PUSH {R1}
     8d0:	e52d1004 	push	{r1}		; (str r1, [sp, #-4]!)
	PUSH {LR}
     8d4:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
	LDR R1, =PUSH_edge	// load the target memory address	
     8d8:	e59f104c 	ldr	r1, [pc, #76]	; 92c <disable_PB_INT_ASM+0x24>
	STR R0, [R1]		// store the input value (which is in R0) to the memory address in R1
     8dc:	e5810000 	str	r0, [r1]
	POP {LR}
     8e0:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
	POP {R1}
     8e4:	e49d1004 	pop	{r1}		; (ldr r1, [sp], #4)
	BX LR 				// leave
     8e8:	e12fff1e 	bx	lr

000008ec <enable_PB_INT_ASM>:

enable_PB_INT_ASM:		// write the input string into the interrupt mask memory location
	PUSH {R1}
     8ec:	e52d1004 	push	{r1}		; (str r1, [sp, #-4]!)
	PUSH {LR}
     8f0:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
	LDR R1, =PUSH_mask	// load the target memory address
     8f4:	e59f1034 	ldr	r1, [pc, #52]	; 930 <disable_PB_INT_ASM+0x28>
	STR R0, [R1]		// store the input value (which is in R0) to the memory address in R1
     8f8:	e5810000 	str	r0, [r1]
	POP {LR}
     8fc:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
	POP {R1}
     900:	e49d1004 	pop	{r1}		; (ldr r1, [sp], #4)
	BX LR 				// leave
     904:	e12fff1e 	bx	lr

00000908 <disable_PB_INT_ASM>:

disable_PB_INT_ASM:		// write the opposite of the input string into the interrupt mask memory location
	PUSH {R1}
     908:	e52d1004 	push	{r1}		; (str r1, [sp, #-4]!)
	PUSH {LR}
     90c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
	LDR R1, =PUSH_mask	// load the target memory address
     910:	e59f1018 	ldr	r1, [pc, #24]	; 930 <disable_PB_INT_ASM+0x28>
	MVN R0, R0			// invert the input string
     914:	e1e00000 	mvn	r0, r0
	STR R0, [R1]		// store the input value (which is in R0) to the memory address in R1
     918:	e5810000 	str	r0, [r1]
	POP {LR}
     91c:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
	POP {R1}
     920:	e49d1004 	pop	{r1}		; (ldr r1, [sp], #4)
	BX LR 				// leave
     924:	e12fff1e 	bx	lr
		.global enable_PB_INT_ASM
		.global disable_PB_INT_ASM

read_PB_data_ASM:		// return a binary string, where the final 4 bits hold the status of the buttons (pressed or not)
	PUSH {LR}
	LDR R1, =PUSH_data	// load the memory address from which we'll get the value
     928:	ff200050 	.word	0xff200050
	POP {R1}
	BX LR 				// leave

read_PB_edgecap_ASM:	// return a binary string, where the final 4 bits hold the edgecap bits
	PUSH {LR}
	LDR R0, =PUSH_edge	// load the memory address from which we'll get the value
     92c:	ff20005c 	.word	0xff20005c
	BX LR 				// leave

enable_PB_INT_ASM:		// write the input string into the interrupt mask memory location
	PUSH {R1}
	PUSH {LR}
	LDR R1, =PUSH_mask	// load the target memory address
     930:	ff200058 	.word	0xff200058

00000934 <read_LEDs_ASM>:
				.text
				.equ LED_BASE, 0xFF200000
				.global read_LEDs_ASM
				.global write_LEDs_ASM

read_LEDs_ASM:	LDR R1, = LED_BASE		// Load the value of LED's memory location into R0
     934:	e59f1010 	ldr	r1, [pc, #16]	; 94c <write_LEDs_ASM+0xc>
				LDR R0, [R1]
     938:	e5910000 	ldr	r0, [r1]
				BX LR
     93c:	e12fff1e 	bx	lr

00000940 <write_LEDs_ASM>:

write_LEDs_ASM:	LDR R1, = LED_BASE	// The write takes an argument
     940:	e59f1004 	ldr	r1, [pc, #4]	; 94c <write_LEDs_ASM+0xc>
				STR R0, [R1]	//The write will store the value in R0 at LED's memory location
     944:	e5810000 	str	r0, [r1]
				BX LR
     948:	e12fff1e 	bx	lr
				.text
				.equ LED_BASE, 0xFF200000
				.global read_LEDs_ASM
				.global write_LEDs_ASM

read_LEDs_ASM:	LDR R1, = LED_BASE		// Load the value of LED's memory location into R0
     94c:	ff200000 	.word	0xff200000

00000950 <read_slider_switches_ASM>:
							.text
							.equ SW_BASE, 0xFF200040
							.global read_slider_switches_ASM

read_slider_switches_ASM:	LDR R1, = SW_BASE	// read the value of memory location designated for 
     950:	e59f1004 	ldr	r1, [pc, #4]	; 95c <read_slider_switches_ASM+0xc>
							LDR R0, [R1]		// the slider switches data into the R0 register
     954:	e5910000 	ldr	r0, [r1]
							BX LR
     958:	e12fff1e 	bx	lr
							.text
							.equ SW_BASE, 0xFF200040
							.global read_slider_switches_ASM

read_slider_switches_ASM:	LDR R1, = SW_BASE	// read the value of memory location designated for 
     95c:	ff200040 	.word	0xff200040

00000960 <HPS_TIM_config_ASM>:
	.global HPS_TIM_config_ASM
	.global HPS_TIM_clear_INT_ASM
	.global HPS_TIM_read_INT_ASM

HPS_TIM_config_ASM:
	PUSH {R4-R7, LR}
     960:	e92d40f0 	push	{r4, r5, r6, r7, lr}
	MOV R1, #0
     964:	e3a01000 	mov	r1, #0
	MOV R2, #1
     968:	e3a02001 	mov	r2, #1
	LDR R7, [R0]
     96c:	e5907000 	ldr	r7, [r0]
	B LOOP
     970:	eaffffff 	b	974 <LOOP>

00000974 <LOOP>:

LOOP:
	TST R7, R2, LSL R1
     974:	e1170112 	tst	r7, r2, lsl r1
	BEQ CONTINUE
     978:	0a000000 	beq	980 <CONTINUE>
	BL CONFIG
     97c:	eb000004 	bl	994 <CONFIG>

00000980 <CONTINUE>:

CONTINUE:
	ADD R1, R1, #1
     980:	e2811001 	add	r1, r1, #1
	CMP R1, #4
     984:	e3510004 	cmp	r1, #4
	BLT LOOP
     988:	bafffff9 	blt	974 <LOOP>

0000098c <DONE>:

DONE:
	POP {R4-R7, LR}
     98c:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
	BX LR
     990:	e12fff1e 	bx	lr

00000994 <CONFIG>:


CONFIG:
	PUSH {LR}
     994:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
	
	LDR R3, =HPS_TIM_BASE
     998:	e59f3144 	ldr	r3, [pc, #324]	; ae4 <HPS_TIM_BASE+0x10>
	LDR R4, [R3, R1, LSL #2]
     99c:	e7934101 	ldr	r4, [r3, r1, lsl #2]
	
	BL DISABLE
     9a0:	eb000005 	bl	9bc <DISABLE>
	BL SET_LOAD_VAL
     9a4:	eb000008 	bl	9cc <SET_LOAD_VAL>
	BL SET_LOAD_BIT
     9a8:	eb00000e 	bl	9e8 <SET_LOAD_BIT>
	BL SET_INT_BIT
     9ac:	eb000013 	bl	a00 <SET_INT_BIT>
	BL SET_EN_BIT
     9b0:	eb000019 	bl	a1c <SET_EN_BIT>
	
	POP {LR}
     9b4:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
	BX LR 
     9b8:	e12fff1e 	bx	lr

000009bc <DISABLE>:

DISABLE:
	LDR R5, [R4, #0x8]
     9bc:	e5945008 	ldr	r5, [r4, #8]
	AND R5, R5, #0xFFFFFFFE
     9c0:	e3c55001 	bic	r5, r5, #1
	STR R5, [R4, #0x8]
     9c4:	e5845008 	str	r5, [r4, #8]
	BX LR
     9c8:	e12fff1e 	bx	lr

000009cc <SET_LOAD_VAL>:
	
SET_LOAD_VAL:
	LDR R5, [R0, #0x4]
     9cc:	e5905004 	ldr	r5, [r0, #4]
	MOV R6, #25
     9d0:	e3a06019 	mov	r6, #25
	MUL R5, R5, R6
     9d4:	e0050695 	mul	r5, r5, r6
	CMP R1, #2
     9d8:	e3510002 	cmp	r1, #2
	LSLLT R5, R5, #2
     9dc:	b1a05105 	lsllt	r5, r5, #2
	STR R5, [R4]
     9e0:	e5845000 	str	r5, [r4]
	BX LR
     9e4:	e12fff1e 	bx	lr

000009e8 <SET_LOAD_BIT>:
	
SET_LOAD_BIT:
	LDR R5, [R4, #0x8]
     9e8:	e5945008 	ldr	r5, [r4, #8]
	LDR R6, [R0, #0x8]
     9ec:	e5906008 	ldr	r6, [r0, #8]
	AND R5, R5, #0xFFFFFFFD
     9f0:	e3c55002 	bic	r5, r5, #2
	ORR R5, R5, R6, LSL #1
     9f4:	e1855086 	orr	r5, r5, r6, lsl #1
	STR R5, [R4, #0x8]
     9f8:	e5845008 	str	r5, [r4, #8]
	BX LR
     9fc:	e12fff1e 	bx	lr

00000a00 <SET_INT_BIT>:
	
SET_INT_BIT:
	LDR R5, [R4, #0x8]
     a00:	e5945008 	ldr	r5, [r4, #8]
	LDR R6, [R0, #0xC]
     a04:	e590600c 	ldr	r6, [r0, #12]
	EOR R6, R6, #0x00000001
     a08:	e2266001 	eor	r6, r6, #1
	AND R5, R5, #0xFFFFFFFB
     a0c:	e3c55004 	bic	r5, r5, #4
	ORR R5, R5, R6, LSL #2
     a10:	e1855106 	orr	r5, r5, r6, lsl #2
	STR R5, [R4, #0x8]
     a14:	e5845008 	str	r5, [r4, #8]
	BX LR
     a18:	e12fff1e 	bx	lr

00000a1c <SET_EN_BIT>:
	
SET_EN_BIT:
	LDR R5, [R4, #0x8]
     a1c:	e5945008 	ldr	r5, [r4, #8]
	LDR R6, [R0, #0x10]
     a20:	e5906010 	ldr	r6, [r0, #16]
	AND R5, R5, #0xFFFFFFFE
     a24:	e3c55001 	bic	r5, r5, #1
	ORR R5, R5, R6
     a28:	e1855006 	orr	r5, r5, r6
	STR R5, [R4, #0x8]
     a2c:	e5845008 	str	r5, [r4, #8]
	BX LR
     a30:	e12fff1e 	bx	lr

00000a34 <HPS_TIM_clear_INT_ASM>:

HPS_TIM_clear_INT_ASM:		// clear_INT_asm
	PUSH {LR}
     a34:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
	MOV R1, #0
     a38:	e3a01000 	mov	r1, #0
	MOV R2, #1
     a3c:	e3a02001 	mov	r2, #1
	B CLEAR_INT_LOOP
     a40:	eaffffff 	b	a44 <CLEAR_INT_LOOP>

00000a44 <CLEAR_INT_LOOP>:

CLEAR_INT_LOOP:
	TST R0, R2, LSL R1
     a44:	e1100112 	tst	r0, r2, lsl r1
	BEQ CLEAR_INT_CONTINUE
     a48:	0a000000 	beq	a50 <CLEAR_INT_CONTINUE>
	BL CLEAR_INT
     a4c:	eb000005 	bl	a68 <CLEAR_INT>

00000a50 <CLEAR_INT_CONTINUE>:

CLEAR_INT_CONTINUE:
	ADD R1, R1, #1
     a50:	e2811001 	add	r1, r1, #1
	CMP R1, #4
     a54:	e3510004 	cmp	r1, #4
	BLT CLEAR_INT_LOOP
     a58:	bafffff9 	blt	a44 <CLEAR_INT_LOOP>
	B CLEAR_INT_DONE
     a5c:	eaffffff 	b	a60 <CLEAR_INT_DONE>

00000a60 <CLEAR_INT_DONE>:

CLEAR_INT_DONE:
	POP {LR}
     a60:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
	BX LR
     a64:	e12fff1e 	bx	lr

00000a68 <CLEAR_INT>:

CLEAR_INT:
	LDR R3, =HPS_TIM_BASE
     a68:	e59f3074 	ldr	r3, [pc, #116]	; ae4 <HPS_TIM_BASE+0x10>
	LDR R3, [R3, R1, LSL #2]
     a6c:	e7933101 	ldr	r3, [r3, r1, lsl #2]
	LDR R3, [R3, #0xC]
     a70:	e593300c 	ldr	r3, [r3, #12]
	BX LR
     a74:	e12fff1e 	bx	lr

00000a78 <HPS_TIM_read_INT_ASM>:

HPS_TIM_read_INT_ASM:
	PUSH {LR}
     a78:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
	PUSH {R4}
     a7c:	e52d4004 	push	{r4}		; (str r4, [sp, #-4]!)
	MOV R1, #0
     a80:	e3a01000 	mov	r1, #0
	MOV R2, #1
     a84:	e3a02001 	mov	r2, #1
	MOV R4, #0
     a88:	e3a04000 	mov	r4, #0
	B READ_INT_LOOP
     a8c:	eaffffff 	b	a90 <READ_INT_LOOP>

00000a90 <READ_INT_LOOP>:

READ_INT_LOOP:
	TST R0, R2, LSL R1
     a90:	e1100112 	tst	r0, r2, lsl r1
	BEQ READ_INT_CONTINUE
     a94:	0a000000 	beq	a9c <READ_INT_CONTINUE>
	BL READ_INT
     a98:	eb000008 	bl	ac0 <READ_INT>

00000a9c <READ_INT_CONTINUE>:

READ_INT_CONTINUE:
	ADD R1, R1, #1
     a9c:	e2811001 	add	r1, r1, #1
	CMP R1, #4
     aa0:	e3510004 	cmp	r1, #4
	BEQ READ_INT_DONE
     aa4:	0a000001 	beq	ab0 <READ_INT_DONE>
	LSL R4, R4, #1
     aa8:	e1a04084 	lsl	r4, r4, #1
	B READ_INT_LOOP
     aac:	eafffff7 	b	a90 <READ_INT_LOOP>

00000ab0 <READ_INT_DONE>:
	
READ_INT_DONE:
	MOV R0, R4
     ab0:	e1a00004 	mov	r0, r4
	POP {R4}
     ab4:	e49d4004 	pop	{r4}		; (ldr r4, [sp], #4)
	POP {LR}
     ab8:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
	BX LR
     abc:	e12fff1e 	bx	lr

00000ac0 <READ_INT>:

READ_INT:
	LDR R3, =HPS_TIM_BASE
     ac0:	e59f301c 	ldr	r3, [pc, #28]	; ae4 <HPS_TIM_BASE+0x10>
	LDR R3, [R3, R1, LSL #2]
     ac4:	e7933101 	ldr	r3, [r3, r1, lsl #2]
	LDR R3, [R3, #0x10]
     ac8:	e5933010 	ldr	r3, [r3, #16]
	//AND R3, R3, 0x1
	EOR R4, R4, R3
     acc:	e0244003 	eor	r4, r4, r3
	BX LR
     ad0:	e12fff1e 	bx	lr

00000ad4 <HPS_TIM_BASE>:
     ad4:	ffc08000 	.word	0xffc08000
     ad8:	ffc09000 	.word	0xffc09000
     adc:	ffd00000 	.word	0xffd00000
     ae0:	ffd01000 	.word	0xffd01000


CONFIG:
	PUSH {LR}
	
	LDR R3, =HPS_TIM_BASE
     ae4:	00000ad4 	.word	0x00000ad4

00000ae8 <hps_tim0_int_flag>:
     ae8:	00000000 	.word	0x00000000

00000aec <pb_int_flag>:
     aec:	00000000 	.word	0x00000000

00000af0 <A9_PRIV_TIM_ISR>:

pb_int_flag:
	.word 0x0

A9_PRIV_TIM_ISR:
	BX LR
     af0:	e12fff1e 	bx	lr

00000af4 <HPS_GPIO1_ISR>:
	
HPS_GPIO1_ISR:
	BX LR
     af4:	e12fff1e 	bx	lr

00000af8 <HPS_TIM0_ISR>:
	
HPS_TIM0_ISR:
	PUSH {LR}					
     af8:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
	
	MOV R0, #0x1
     afc:	e3a00001 	mov	r0, #1
	BL HPS_TIM_clear_INT_ASM	//Clear tim0
     b00:	ebffffcb 	bl	a34 <HPS_TIM_clear_INT_ASM>

	LDR R0, =hps_tim0_int_flag
     b04:	e59f0098 	ldr	r0, [pc, #152]	; ba4 <FPGA_PS2_DUAL_ISR+0x4>
	MOV R1, #1
     b08:	e3a01001 	mov	r1, #1
	STR R1, [R0]				//Set flag to 1
     b0c:	e5801000 	str	r1, [r0]

	POP {LR}					//Pop LR from stack
     b10:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
	BX LR
     b14:	e12fff1e 	bx	lr

00000b18 <HPS_TIM1_ISR>:
	
HPS_TIM1_ISR:
	BX LR
     b18:	e12fff1e 	bx	lr

00000b1c <HPS_TIM2_ISR>:
	
HPS_TIM2_ISR:
	BX LR
     b1c:	e12fff1e 	bx	lr

00000b20 <HPS_TIM3_ISR>:
	
HPS_TIM3_ISR:
	BX LR
     b20:	e12fff1e 	bx	lr

00000b24 <FPGA_INTERVAL_TIM_ISR>:
	
FPGA_INTERVAL_TIM_ISR:
	BX LR
     b24:	e12fff1e 	bx	lr

00000b28 <FPGA_PB_KEYS_ISR>:
	
FPGA_PB_KEYS_ISR:
	PUSH {LR}
     b28:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
//LDR R0, =0x10000050
	LDR R0, =0xFF20005C 
     b2c:	e59f0074 	ldr	r0, [pc, #116]	; ba8 <FPGA_PS2_DUAL_ISR+0x8>
	LDR R1, [R0] 
     b30:	e5901000 	ldr	r1, [r0]
	STR R1, [R0] 
     b34:	e5801000 	str	r1, [r0]
	LDR R0, =pb_int_flag 
     b38:	e59f006c 	ldr	r0, [pc, #108]	; bac <FPGA_PS2_DUAL_ISR+0xc>

00000b3c <KEY0>:
KEY0:
	MOV R3, #0x1
     b3c:	e3a03001 	mov	r3, #1
	AND R3, R3, R1 
     b40:	e0033001 	and	r3, r3, r1
	CMP R3, #0
     b44:	e3530000 	cmp	r3, #0
	BEQ KEY1	
     b48:	0a000002 	beq	b58 <KEY1>
	MOV R2, #0
     b4c:	e3a02000 	mov	r2, #0
	STR R2, [R0] 
     b50:	e5802000 	str	r2, [r0]
	B ENDk
     b54:	ea000009 	b	b80 <ENDk>

00000b58 <KEY1>:
KEY1:
	MOV R3, #0x2
     b58:	e3a03002 	mov	r3, #2
	AND R3, R3, R1 
     b5c:	e0033001 	and	r3, r3, r1
	CMP R3, #0
     b60:	e3530000 	cmp	r3, #0
	BEQ KEY2	
     b64:	0a000002 	beq	b74 <KEY2>
	MOV R2, #1
     b68:	e3a02001 	mov	r2, #1
	STR R2, [R0]
     b6c:	e5802000 	str	r2, [r0]
	B ENDk
     b70:	ea000002 	b	b80 <ENDk>

00000b74 <KEY2>:
KEY2:
	MOV R3, #0x4
     b74:	e3a03004 	mov	r3, #4
	//AND R3, R1 
	MOV R2, #2
     b78:	e3a02002 	mov	r2, #2
	STR R2, [R0] 
     b7c:	e5802000 	str	r2, [r0]

00000b80 <ENDk>:
ENDk:
	POP {LR}
     b80:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
	BX LR 
     b84:	e12fff1e 	bx	lr

00000b88 <FPGA_Audio_ISR>:

FPGA_Audio_ISR:
	BX LR
     b88:	e12fff1e 	bx	lr

00000b8c <FPGA_PS2_ISR>:
	
FPGA_PS2_ISR:
	BX LR
     b8c:	e12fff1e 	bx	lr

00000b90 <FPGA_JTAG_ISR>:
	
FPGA_JTAG_ISR:
	BX LR
     b90:	e12fff1e 	bx	lr

00000b94 <FPGA_IrDA_ISR>:
	
FPGA_IrDA_ISR:
	BX LR
     b94:	e12fff1e 	bx	lr

00000b98 <FPGA_JP1_ISR>:
	
FPGA_JP1_ISR:
	BX LR
     b98:	e12fff1e 	bx	lr

00000b9c <FPGA_JP2_ISR>:
	
FPGA_JP2_ISR:
	BX LR
     b9c:	e12fff1e 	bx	lr

00000ba0 <FPGA_PS2_DUAL_ISR>:
	
FPGA_PS2_DUAL_ISR:
	BX LR
     ba0:	e12fff1e 	bx	lr
	PUSH {LR}					
	
	MOV R0, #0x1
	BL HPS_TIM_clear_INT_ASM	//Clear tim0

	LDR R0, =hps_tim0_int_flag
     ba4:	00000ae8 	.word	0x00000ae8
	BX LR
	
FPGA_PB_KEYS_ISR:
	PUSH {LR}
//LDR R0, =0x10000050
	LDR R0, =0xFF20005C 
     ba8:	ff20005c 	.word	0xff20005c
	LDR R1, [R0] 
	STR R1, [R0] 
	LDR R0, =pb_int_flag 
     bac:	00000aec 	.word	0x00000aec

00000bb0 <disable_A9_interrupts>:
#include "../inc/int_setup.h"

void disable_A9_interrupts() {
     bb0:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     bb4:	e28db000 	add	r11, sp, #0
     bb8:	e24dd00c 	sub	sp, sp, #12
	int status = 0b11010011;
     bbc:	e3a030d3 	mov	r3, #211	; 0xd3
     bc0:	e50b3008 	str	r3, [r11, #-8]
	asm("msr cpsr, %[ps]" : : [ps]"r"(status));
     bc4:	e51b3008 	ldr	r3, [r11, #-8]
     bc8:	e129f003 	msr	CPSR_fc, r3
}
     bcc:	e28bd000 	add	sp, r11, #0
     bd0:	e8bd0800 	ldmfd	sp!, {r11}
     bd4:	e12fff1e 	bx	lr

00000bd8 <enable_A9_interrupts>:

void enable_A9_interrupts() {
     bd8:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     bdc:	e28db000 	add	r11, sp, #0
     be0:	e24dd00c 	sub	sp, sp, #12
	int status = 0b01010011;
     be4:	e3a03053 	mov	r3, #83	; 0x53
     be8:	e50b3008 	str	r3, [r11, #-8]
	asm("msr cpsr, %[ps]" : : [ps]"r"(status));
     bec:	e51b3008 	ldr	r3, [r11, #-8]
     bf0:	e129f003 	msr	CPSR_fc, r3
}
     bf4:	e28bd000 	add	sp, r11, #0
     bf8:	e8bd0800 	ldmfd	sp!, {r11}
     bfc:	e12fff1e 	bx	lr

00000c00 <set_A9_IRQ_stack>:

void set_A9_IRQ_stack() {
     c00:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     c04:	e28db000 	add	r11, sp, #0
     c08:	e24dd00c 	sub	sp, sp, #12
	int stack, mode;
	stack = 0xFFFFFFFF - 7;
     c0c:	e3e03007 	mvn	r3, #7
     c10:	e50b3008 	str	r3, [r11, #-8]
	mode = 0b11010010;
     c14:	e3a030d2 	mov	r3, #210	; 0xd2
     c18:	e50b300c 	str	r3, [r11, #-12]
	asm("msr cpsr, %[ps]" : : [ps] "r" (mode));
     c1c:	e51b300c 	ldr	r3, [r11, #-12]
     c20:	e129f003 	msr	CPSR_fc, r3
	asm("mov sp, %[ps]" : : [ps] "r" (stack));
     c24:	e51b3008 	ldr	r3, [r11, #-8]
     c28:	e1a0d003 	mov	sp, r3
	
	mode = 0b11010011;
     c2c:	e3a030d3 	mov	r3, #211	; 0xd3
     c30:	e50b300c 	str	r3, [r11, #-12]
	asm("msr cpsr, %[ps]" : : [ps] "r" (mode));
     c34:	e51b300c 	ldr	r3, [r11, #-12]
     c38:	e129f003 	msr	CPSR_fc, r3
}
     c3c:	e28bd000 	add	sp, r11, #0
     c40:	e8bd0800 	ldmfd	sp!, {r11}
     c44:	e12fff1e 	bx	lr

00000c48 <config_interrupt>:

void config_interrupt(int ID, int CPU) {
     c48:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     c4c:	e28db000 	add	r11, sp, #0
     c50:	e24dd01c 	sub	sp, sp, #28
     c54:	e50b0018 	str	r0, [r11, #-24]	; 0xffffffe8
     c58:	e50b101c 	str	r1, [r11, #-28]	; 0xffffffe4
	int reg_offset;
	int index;
	int value;
	int address;
	
	reg_offset = (ID>>3) & 0xFFFFFFFC;
     c5c:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
     c60:	e1a031c3 	asr	r3, r3, #3
     c64:	e3c33003 	bic	r3, r3, #3
     c68:	e50b3008 	str	r3, [r11, #-8]
	index = ID & 0x1F;
     c6c:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
     c70:	e203301f 	and	r3, r3, #31
     c74:	e50b300c 	str	r3, [r11, #-12]
	value = 1<<index;
     c78:	e3a02001 	mov	r2, #1
     c7c:	e51b300c 	ldr	r3, [r11, #-12]
     c80:	e1a03312 	lsl	r3, r2, r3
     c84:	e50b3010 	str	r3, [r11, #-16]
	address = MPCORE_GIC_DIST + ICDISER + reg_offset;
     c88:	e51b3008 	ldr	r3, [r11, #-8]
     c8c:	e2433b4b 	sub	r3, r3, #76800	; 0x12c00
     c90:	e2433c03 	sub	r3, r3, #768	; 0x300
     c94:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
	*(int *)address |= value;
     c98:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
     c9c:	e51b2014 	ldr	r2, [r11, #-20]	; 0xffffffec
     ca0:	e5921000 	ldr	r1, [r2]
     ca4:	e51b2010 	ldr	r2, [r11, #-16]
     ca8:	e1812002 	orr	r2, r1, r2
     cac:	e5832000 	str	r2, [r3]
	
	reg_offset = (ID & 0xFFFFFFFC);
     cb0:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
     cb4:	e3c33003 	bic	r3, r3, #3
     cb8:	e50b3008 	str	r3, [r11, #-8]
	index = ID & 3;
     cbc:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
     cc0:	e2033003 	and	r3, r3, #3
     cc4:	e50b300c 	str	r3, [r11, #-12]
	address = MPCORE_GIC_DIST + ICDIPTR + reg_offset + index;
     cc8:	e51b2008 	ldr	r2, [r11, #-8]
     ccc:	e51b300c 	ldr	r3, [r11, #-12]
     cd0:	e0823003 	add	r3, r2, r3
     cd4:	e2433b4a 	sub	r3, r3, #75776	; 0x12800
     cd8:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
	*(char *)address = (char)CPU;
     cdc:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
     ce0:	e51b201c 	ldr	r2, [r11, #-28]	; 0xffffffe4
     ce4:	e6ef2072 	uxtb	r2, r2
     ce8:	e5c32000 	strb	r2, [r3]
}
     cec:	e28bd000 	add	sp, r11, #0
     cf0:	e8bd0800 	ldmfd	sp!, {r11}
     cf4:	e12fff1e 	bx	lr

00000cf8 <config_GIC>:

void config_GIC(int len, int* IDs) {
     cf8:	e92d4800 	push	{r11, lr}
     cfc:	e28db004 	add	r11, sp, #4
     d00:	e24dd010 	sub	sp, sp, #16
     d04:	e50b0010 	str	r0, [r11, #-16]
     d08:	e50b1014 	str	r1, [r11, #-20]	; 0xffffffec
	int i;
	for(i=0 ; i<len ; i++)
     d0c:	e3a03000 	mov	r3, #0
     d10:	e50b3008 	str	r3, [r11, #-8]
     d14:	ea00000a 	b	d44 <config_GIC+0x4c>
		config_interrupt(IDs[i],1);
     d18:	e51b3008 	ldr	r3, [r11, #-8]
     d1c:	e1a03103 	lsl	r3, r3, #2
     d20:	e51b2014 	ldr	r2, [r11, #-20]	; 0xffffffec
     d24:	e0823003 	add	r3, r2, r3
     d28:	e5933000 	ldr	r3, [r3]
     d2c:	e1a00003 	mov	r0, r3
     d30:	e3a01001 	mov	r1, #1
     d34:	ebffffc3 	bl	c48 <config_interrupt>
	*(char *)address = (char)CPU;
}

void config_GIC(int len, int* IDs) {
	int i;
	for(i=0 ; i<len ; i++)
     d38:	e51b3008 	ldr	r3, [r11, #-8]
     d3c:	e2833001 	add	r3, r3, #1
     d40:	e50b3008 	str	r3, [r11, #-8]
     d44:	e51b2008 	ldr	r2, [r11, #-8]
     d48:	e51b3010 	ldr	r3, [r11, #-16]
     d4c:	e1520003 	cmp	r2, r3
     d50:	bafffff0 	blt	d18 <config_GIC+0x20>
		config_interrupt(IDs[i],1);
	*((int *) (MPCORE_GIC_CPUIF + ICCPMR)) = 0xFFFF;
     d54:	e30c3104 	movw	r3, #49412	; 0xc104
     d58:	e34f3ffe 	movt	r3, #65534	; 0xfffe
     d5c:	e30f2fff 	movw	r2, #65535	; 0xffff
     d60:	e5832000 	str	r2, [r3]
	*((int *) (MPCORE_GIC_CPUIF)) = 1;
     d64:	e3a03cc1 	mov	r3, #49408	; 0xc100
     d68:	e34f3ffe 	movt	r3, #65534	; 0xfffe
     d6c:	e3a02001 	mov	r2, #1
     d70:	e5832000 	str	r2, [r3]
	*((int *) (MPCORE_GIC_DIST)) = 1;
     d74:	e3a03a0d 	mov	r3, #53248	; 0xd000
     d78:	e34f3ffe 	movt	r3, #65534	; 0xfffe
     d7c:	e3a02001 	mov	r2, #1
     d80:	e5832000 	str	r2, [r3]
}
     d84:	e24bd004 	sub	sp, r11, #4
     d88:	e8bd8800 	pop	{r11, pc}

00000d8c <__cs3_isr_irq>:

void __attribute__ ((interrupt)) __cs3_isr_irq() {
     d8c:	e24ee004 	sub	lr, lr, #4
     d90:	e92d580f 	push	{r0, r1, r2, r3, r11, r12, lr}
     d94:	e28db018 	add	r11, sp, #24
     d98:	e24dd00c 	sub	sp, sp, #12
	int interrupt_ID = *((int *) (MPCORE_GIC_CPUIF + ICCIAR));
     d9c:	e30c310c 	movw	r3, #49420	; 0xc10c
     da0:	e34f3ffe 	movt	r3, #65534	; 0xfffe
     da4:	e5933000 	ldr	r3, [r3]
     da8:	e50b3020 	str	r3, [r11, #-32]	; 0xffffffe0
	
	switch(interrupt_ID) {
     dac:	e51b3020 	ldr	r3, [r11, #-32]	; 0xffffffe0
     db0:	e3530053 	cmp	r3, #83	; 0x53
     db4:	0a00003d 	beq	eb0 <__cs3_isr_irq+0x124>
     db8:	e3530053 	cmp	r3, #83	; 0x53
     dbc:	ca000011 	bgt	e08 <__cs3_isr_irq+0x7c>
     dc0:	e353004e 	cmp	r3, #78	; 0x4e
     dc4:	0a000031 	beq	e90 <__cs3_isr_irq+0x104>
     dc8:	e353004e 	cmp	r3, #78	; 0x4e
     dcc:	ca000006 	bgt	dec <__cs3_isr_irq+0x60>
     dd0:	e3530048 	cmp	r3, #72	; 0x48
     dd4:	0a000029 	beq	e80 <__cs3_isr_irq+0xf4>
     dd8:	e3530049 	cmp	r3, #73	; 0x49
     ddc:	0a000029 	beq	e88 <__cs3_isr_irq+0xfc>
     de0:	e353001d 	cmp	r3, #29
     de4:	0a000019 	beq	e50 <__cs3_isr_irq+0xc4>
     de8:	ea000036 	b	ec8 <__cs3_isr_irq+0x13c>
     dec:	e3530050 	cmp	r3, #80	; 0x50
     df0:	0a00002a 	beq	ea0 <__cs3_isr_irq+0x114>
     df4:	e3530050 	cmp	r3, #80	; 0x50
     df8:	ba000026 	blt	e98 <__cs3_isr_irq+0x10c>
     dfc:	e3530051 	cmp	r3, #81	; 0x51
     e00:	0a000028 	beq	ea8 <__cs3_isr_irq+0x11c>
     e04:	ea00002f 	b	ec8 <__cs3_isr_irq+0x13c>
     e08:	e35300c7 	cmp	r3, #199	; 0xc7
     e0c:	0a000013 	beq	e60 <__cs3_isr_irq+0xd4>
     e10:	e35300c7 	cmp	r3, #199	; 0xc7
     e14:	ca000006 	bgt	e34 <__cs3_isr_irq+0xa8>
     e18:	e3530059 	cmp	r3, #89	; 0x59
     e1c:	0a000027 	beq	ec0 <__cs3_isr_irq+0x134>
     e20:	e35300c5 	cmp	r3, #197	; 0xc5
     e24:	0a00000b 	beq	e58 <__cs3_isr_irq+0xcc>
     e28:	e3530054 	cmp	r3, #84	; 0x54
     e2c:	0a000021 	beq	eb8 <__cs3_isr_irq+0x12c>
     e30:	ea000024 	b	ec8 <__cs3_isr_irq+0x13c>
     e34:	e35300c9 	cmp	r3, #201	; 0xc9
     e38:	0a00000c 	beq	e70 <__cs3_isr_irq+0xe4>
     e3c:	e35300c9 	cmp	r3, #201	; 0xc9
     e40:	ba000008 	blt	e68 <__cs3_isr_irq+0xdc>
     e44:	e35300ca 	cmp	r3, #202	; 0xca
     e48:	0a00000a 	beq	e78 <__cs3_isr_irq+0xec>
     e4c:	ea00001d 	b	ec8 <__cs3_isr_irq+0x13c>
		
		case 29:  A9_PRIV_TIM_ISR(); break;
     e50:	ebffff26 	bl	af0 <A9_PRIV_TIM_ISR>
     e54:	ea00001c 	b	ecc <__cs3_isr_irq+0x140>
		case 197: HPS_GPIO1_ISR(); break;
     e58:	ebffff25 	bl	af4 <HPS_GPIO1_ISR>
     e5c:	ea00001a 	b	ecc <__cs3_isr_irq+0x140>
		case 199: HPS_TIM0_ISR(); break;
     e60:	ebffff24 	bl	af8 <HPS_TIM0_ISR>
     e64:	ea000018 	b	ecc <__cs3_isr_irq+0x140>
		case 200: HPS_TIM1_ISR(); break;
     e68:	ebffff2a 	bl	b18 <HPS_TIM1_ISR>
     e6c:	ea000016 	b	ecc <__cs3_isr_irq+0x140>
		case 201: HPS_TIM2_ISR(); break;
     e70:	ebffff29 	bl	b1c <HPS_TIM2_ISR>
     e74:	ea000014 	b	ecc <__cs3_isr_irq+0x140>
		case 202: HPS_TIM3_ISR(); break;
     e78:	ebffff28 	bl	b20 <HPS_TIM3_ISR>
     e7c:	ea000012 	b	ecc <__cs3_isr_irq+0x140>
		case 72:  FPGA_INTERVAL_TIM_ISR(); break;
     e80:	ebffff27 	bl	b24 <FPGA_INTERVAL_TIM_ISR>
     e84:	ea000010 	b	ecc <__cs3_isr_irq+0x140>
		case 73:  FPGA_PB_KEYS_ISR(); break;
     e88:	ebffff26 	bl	b28 <FPGA_PB_KEYS_ISR>
     e8c:	ea00000e 	b	ecc <__cs3_isr_irq+0x140>
		case 78:  FPGA_Audio_ISR(); break;
     e90:	ebffff3c 	bl	b88 <FPGA_Audio_ISR>
     e94:	ea00000c 	b	ecc <__cs3_isr_irq+0x140>
		case 79:  FPGA_PS2_ISR(); break;
     e98:	ebffff3b 	bl	b8c <FPGA_PS2_ISR>
     e9c:	ea00000a 	b	ecc <__cs3_isr_irq+0x140>
		case 80:  FPGA_JTAG_ISR(); break;
     ea0:	ebffff3a 	bl	b90 <FPGA_JTAG_ISR>
     ea4:	ea000008 	b	ecc <__cs3_isr_irq+0x140>
		case 81:  FPGA_IrDA_ISR(); break;
     ea8:	ebffff39 	bl	b94 <FPGA_IrDA_ISR>
     eac:	ea000006 	b	ecc <__cs3_isr_irq+0x140>
		case 83:  FPGA_JP1_ISR(); break;
     eb0:	ebffff38 	bl	b98 <FPGA_JP1_ISR>
     eb4:	ea000004 	b	ecc <__cs3_isr_irq+0x140>
		case 84:  FPGA_JP2_ISR(); break;
     eb8:	ebffff37 	bl	b9c <FPGA_JP2_ISR>
     ebc:	ea000002 	b	ecc <__cs3_isr_irq+0x140>
		case 89:  FPGA_PS2_DUAL_ISR(); break;
     ec0:	ebffff36 	bl	ba0 <FPGA_PS2_DUAL_ISR>
     ec4:	ea000000 	b	ecc <__cs3_isr_irq+0x140>
	
		default: while(1); break;
     ec8:	eafffffe 	b	ec8 <__cs3_isr_irq+0x13c>
	}
	
	*((int *) (MPCORE_GIC_CPUIF + ICCEOIR)) = interrupt_ID;
     ecc:	e30c3110 	movw	r3, #49424	; 0xc110
     ed0:	e34f3ffe 	movt	r3, #65534	; 0xfffe
     ed4:	e51b2020 	ldr	r2, [r11, #-32]	; 0xffffffe0
     ed8:	e5832000 	str	r2, [r3]
}
     edc:	e24bd018 	sub	sp, r11, #24
     ee0:	e8fd980f 	ldm	sp!, {r0, r1, r2, r3, r11, r12, pc}^

00000ee4 <__cs3_reset>:

void __attribute__ ((interrupt)) __cs3_reset (void) {
     ee4:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     ee8:	e28db000 	add	r11, sp, #0
	while(1);
     eec:	eafffffe 	b	eec <__cs3_reset+0x8>

00000ef0 <__cs3_isr_undef>:
}

void __attribute__ ((interrupt)) __cs3_isr_undef (void) {
     ef0:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     ef4:	e28db000 	add	r11, sp, #0
	while(1);
     ef8:	eafffffe 	b	ef8 <__cs3_isr_undef+0x8>

00000efc <__cs3_isr_swi>:
}

void __attribute__ ((interrupt)) __cs3_isr_swi (void) {
     efc:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     f00:	e28db000 	add	r11, sp, #0
	while(1);
     f04:	eafffffe 	b	f04 <__cs3_isr_swi+0x8>

00000f08 <__cs3_isr_pabort>:
}

void __attribute__ ((interrupt)) __cs3_isr_pabort (void) {
     f08:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     f0c:	e28db000 	add	r11, sp, #0
	while(1);
     f10:	eafffffe 	b	f10 <__cs3_isr_pabort+0x8>

00000f14 <__cs3_isr_dabort>:
}

void __attribute__ ((interrupt)) __cs3_isr_dabort (void) {
     f14:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     f18:	e28db000 	add	r11, sp, #0
	while(1);
     f1c:	eafffffe 	b	f1c <__cs3_isr_dabort+0x8>

00000f20 <__cs3_isr_fiq>:
}

void __attribute__ ((interrupt)) __cs3_isr_fiq (void) {
     f20:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     f24:	e28db000 	add	r11, sp, #0
	while(1);
     f28:	eafffffe 	b	f28 <__cs3_isr_fiq+0x8>

00000f2c <fix_bug>:
}

void fix_bug() {
     f2c:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     f30:	e28db000 	add	r11, sp, #0
     f34:	e24dd00c 	sub	sp, sp, #12
	volatile int * addr = (int *)0xFFFED198;
     f38:	e30d3198 	movw	r3, #53656	; 0xd198
     f3c:	e34f3ffe 	movt	r3, #65534	; 0xfffe
     f40:	e50b3008 	str	r3, [r11, #-8]
	*addr = 0x000C0000;
     f44:	e51b3008 	ldr	r3, [r11, #-8]
     f48:	e3a02703 	mov	r2, #786432	; 0xc0000
     f4c:	e5832000 	str	r2, [r3]
}
     f50:	e28bd000 	add	sp, r11, #0
     f54:	e8bd0800 	ldmfd	sp!, {r11}
     f58:	e12fff1e 	bx	lr

00000f5c <int_setup>:

void int_setup(int len, int* IDs) {
     f5c:	e92d4800 	push	{r11, lr}
     f60:	e28db004 	add	r11, sp, #4
     f64:	e24dd008 	sub	sp, sp, #8
     f68:	e50b0008 	str	r0, [r11, #-8]
     f6c:	e50b100c 	str	r1, [r11, #-12]
	disable_A9_interrupts();
     f70:	ebffff0e 	bl	bb0 <disable_A9_interrupts>
	set_A9_IRQ_stack();
     f74:	ebffff21 	bl	c00 <set_A9_IRQ_stack>
	fix_bug();
     f78:	ebffffeb 	bl	f2c <fix_bug>
	config_GIC(len, IDs);
     f7c:	e51b0008 	ldr	r0, [r11, #-8]
     f80:	e51b100c 	ldr	r1, [r11, #-12]
     f84:	ebffff5b 	bl	cf8 <config_GIC>
	enable_A9_interrupts();
     f88:	ebffff12 	bl	bd8 <enable_A9_interrupts>
}
     f8c:	e24bd004 	sub	sp, r11, #4
     f90:	e8bd8800 	pop	{r11, pc}

00000f94 <atexit>:
     f94:	e1a01000 	mov	r1, r0
     f98:	e3a00000 	mov	r0, #0
     f9c:	e92d4008 	push	{r3, lr}
     fa0:	e1a02000 	mov	r2, r0
     fa4:	e1a03000 	mov	r3, r0
     fa8:	eb00000e 	bl	fe8 <__register_exitproc>
     fac:	e8bd4008 	pop	{r3, lr}
     fb0:	e12fff1e 	bx	lr

00000fb4 <exit>:
     fb4:	e92d4008 	push	{r3, lr}
     fb8:	e3a01000 	mov	r1, #0
     fbc:	e1a04000 	mov	r4, r0
     fc0:	eb000045 	bl	10dc <__call_exitprocs>
     fc4:	e59f3018 	ldr	r3, [pc, #24]	; fe4 <exit+0x30>
     fc8:	e5930000 	ldr	r0, [r3]
     fcc:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
     fd0:	e3530000 	cmp	r3, #0
     fd4:	11a0e00f 	movne	lr, pc
     fd8:	112fff13 	bxne	r3
     fdc:	e1a00004 	mov	r0, r4
     fe0:	eb0000c9 	bl	130c <_exit>
     fe4:	000013bc 	.word	0x000013bc

00000fe8 <__register_exitproc>:
     fe8:	e59fc0e4 	ldr	r12, [pc, #228]	; 10d4 <__register_exitproc+0xec>
     fec:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
     ff0:	e59c4000 	ldr	r4, [r12]
     ff4:	e594c148 	ldr	r12, [r4, #328]	; 0x148
     ff8:	e35c0000 	cmp	r12, #0
     ffc:	0284cf53 	addeq	r12, r4, #332	; 0x14c
    1000:	e59c5004 	ldr	r5, [r12, #4]
    1004:	0584c148 	streq	r12, [r4, #328]	; 0x148
    1008:	e355001f 	cmp	r5, #31
    100c:	e24dd010 	sub	sp, sp, #16
    1010:	e1a06000 	mov	r6, r0
    1014:	da000015 	ble	1070 <__register_exitproc+0x88>
    1018:	e59f00b8 	ldr	r0, [pc, #184]	; 10d8 <__register_exitproc+0xf0>
    101c:	e3500000 	cmp	r0, #0
    1020:	1a000001 	bne	102c <__register_exitproc+0x44>
    1024:	e3e00000 	mvn	r0, #0
    1028:	ea000018 	b	1090 <__register_exitproc+0xa8>
    102c:	e3a00e19 	mov	r0, #400	; 0x190
    1030:	e58d100c 	str	r1, [sp, #12]
    1034:	e58d2008 	str	r2, [sp, #8]
    1038:	e58d3004 	str	r3, [sp, #4]
    103c:	e320f000 	nop	{0}
    1040:	e250c000 	subs	r12, r0, #0
    1044:	e59d100c 	ldr	r1, [sp, #12]
    1048:	e59d2008 	ldr	r2, [sp, #8]
    104c:	e59d3004 	ldr	r3, [sp, #4]
    1050:	0afffff3 	beq	1024 <__register_exitproc+0x3c>
    1054:	e5945148 	ldr	r5, [r4, #328]	; 0x148
    1058:	e3a00000 	mov	r0, #0
    105c:	e58c0004 	str	r0, [r12, #4]
    1060:	e58c5000 	str	r5, [r12]
    1064:	e584c148 	str	r12, [r4, #328]	; 0x148
    1068:	e58c0188 	str	r0, [r12, #392]	; 0x188
    106c:	e58c018c 	str	r0, [r12, #396]	; 0x18c
    1070:	e3560000 	cmp	r6, #0
    1074:	e59c4004 	ldr	r4, [r12, #4]
    1078:	1a000007 	bne	109c <__register_exitproc+0xb4>
    107c:	e2843002 	add	r3, r4, #2
    1080:	e2844001 	add	r4, r4, #1
    1084:	e78c1103 	str	r1, [r12, r3, lsl #2]
    1088:	e58c4004 	str	r4, [r12, #4]
    108c:	e3a00000 	mov	r0, #0
    1090:	e28dd010 	add	sp, sp, #16
    1094:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    1098:	e12fff1e 	bx	lr
    109c:	e3a00001 	mov	r0, #1
    10a0:	e1a00410 	lsl	r0, r0, r4
    10a4:	e08c8104 	add	r8, r12, r4, lsl #2
    10a8:	e3560002 	cmp	r6, #2
    10ac:	e59c7188 	ldr	r7, [r12, #392]	; 0x188
    10b0:	e5883108 	str	r3, [r8, #264]	; 0x108
    10b4:	059c318c 	ldreq	r3, [r12, #396]	; 0x18c
    10b8:	e1877000 	orr	r7, r7, r0
    10bc:	01830000 	orreq	r0, r3, r0
    10c0:	e1a05008 	mov	r5, r8
    10c4:	e5882088 	str	r2, [r8, #136]	; 0x88
    10c8:	e58c7188 	str	r7, [r12, #392]	; 0x188
    10cc:	058c018c 	streq	r0, [r12, #396]	; 0x18c
    10d0:	eaffffe9 	b	107c <__register_exitproc+0x94>
    10d4:	000013bc 	.word	0x000013bc
    10d8:	00000000 	.word	0x00000000

000010dc <__call_exitprocs>:
    10dc:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    10e0:	e59f3168 	ldr	r3, [pc, #360]	; 1250 <__call_exitprocs+0x174>
    10e4:	e5933000 	ldr	r3, [r3]
    10e8:	e24dd014 	sub	sp, sp, #20
    10ec:	e58d3004 	str	r3, [sp, #4]
    10f0:	e2833f52 	add	r3, r3, #328	; 0x148
    10f4:	e58d0008 	str	r0, [sp, #8]
    10f8:	e58d300c 	str	r3, [sp, #12]
    10fc:	e1a07001 	mov	r7, r1
    1100:	e3a08001 	mov	r8, #1
    1104:	e59d3004 	ldr	r3, [sp, #4]
    1108:	e5936148 	ldr	r6, [r3, #328]	; 0x148
    110c:	e3560000 	cmp	r6, #0
    1110:	e59db00c 	ldr	r11, [sp, #12]
    1114:	0a000033 	beq	11e8 <__call_exitprocs+0x10c>
    1118:	e5965004 	ldr	r5, [r6, #4]
    111c:	e2554001 	subs	r4, r5, #1
    1120:	5286a088 	addpl	r10, r6, #136	; 0x88
    1124:	5285501f 	addpl	r5, r5, #31
    1128:	508a5105 	addpl	r5, r10, r5, lsl #2
    112c:	5a000007 	bpl	1150 <__call_exitprocs+0x74>
    1130:	ea000029 	b	11dc <__call_exitprocs+0x100>
    1134:	e5953000 	ldr	r3, [r5]
    1138:	e1530007 	cmp	r3, r7
    113c:	0a000005 	beq	1158 <__call_exitprocs+0x7c>
    1140:	e2444001 	sub	r4, r4, #1
    1144:	e3740001 	cmn	r4, #1
    1148:	e2455004 	sub	r5, r5, #4
    114c:	0a000022 	beq	11dc <__call_exitprocs+0x100>
    1150:	e3570000 	cmp	r7, #0
    1154:	1afffff6 	bne	1134 <__call_exitprocs+0x58>
    1158:	e5963004 	ldr	r3, [r6, #4]
    115c:	e06a2005 	rsb	r2, r10, r5
    1160:	e2433001 	sub	r3, r3, #1
    1164:	e0862002 	add	r2, r6, r2
    1168:	e1530004 	cmp	r3, r4
    116c:	e5123078 	ldr	r3, [r2, #-120]	; 0xffffff88
    1170:	13a01000 	movne	r1, #0
    1174:	05864004 	streq	r4, [r6, #4]
    1178:	15021078 	strne	r1, [r2, #-120]	; 0xffffff88
    117c:	e3530000 	cmp	r3, #0
    1180:	0affffee 	beq	1140 <__call_exitprocs+0x64>
    1184:	e1a02418 	lsl	r2, r8, r4
    1188:	e5961188 	ldr	r1, [r6, #392]	; 0x188
    118c:	e1120001 	tst	r2, r1
    1190:	e5969004 	ldr	r9, [r6, #4]
    1194:	0a000016 	beq	11f4 <__call_exitprocs+0x118>
    1198:	e596118c 	ldr	r1, [r6, #396]	; 0x18c
    119c:	e1120001 	tst	r2, r1
    11a0:	1a000016 	bne	1200 <__call_exitprocs+0x124>
    11a4:	e59d0008 	ldr	r0, [sp, #8]
    11a8:	e5151080 	ldr	r1, [r5, #-128]	; 0xffffff80
    11ac:	e1a0e00f 	mov	lr, pc
    11b0:	e12fff13 	bx	r3
    11b4:	e5963004 	ldr	r3, [r6, #4]
    11b8:	e1530009 	cmp	r3, r9
    11bc:	1affffd0 	bne	1104 <__call_exitprocs+0x28>
    11c0:	e59b3000 	ldr	r3, [r11]
    11c4:	e1530006 	cmp	r3, r6
    11c8:	1affffcd 	bne	1104 <__call_exitprocs+0x28>
    11cc:	e2444001 	sub	r4, r4, #1
    11d0:	e3740001 	cmn	r4, #1
    11d4:	e2455004 	sub	r5, r5, #4
    11d8:	1affffdc 	bne	1150 <__call_exitprocs+0x74>
    11dc:	e59f1070 	ldr	r1, [pc, #112]	; 1254 <__call_exitprocs+0x178>
    11e0:	e3510000 	cmp	r1, #0
    11e4:	1a000009 	bne	1210 <__call_exitprocs+0x134>
    11e8:	e28dd014 	add	sp, sp, #20
    11ec:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    11f0:	e12fff1e 	bx	lr
    11f4:	e1a0e00f 	mov	lr, pc
    11f8:	e12fff13 	bx	r3
    11fc:	eaffffec 	b	11b4 <__call_exitprocs+0xd8>
    1200:	e5150080 	ldr	r0, [r5, #-128]	; 0xffffff80
    1204:	e1a0e00f 	mov	lr, pc
    1208:	e12fff13 	bx	r3
    120c:	eaffffe8 	b	11b4 <__call_exitprocs+0xd8>
    1210:	e5963004 	ldr	r3, [r6, #4]
    1214:	e3530000 	cmp	r3, #0
    1218:	e5963000 	ldr	r3, [r6]
    121c:	1a000008 	bne	1244 <__call_exitprocs+0x168>
    1220:	e3530000 	cmp	r3, #0
    1224:	0a000006 	beq	1244 <__call_exitprocs+0x168>
    1228:	e1a00006 	mov	r0, r6
    122c:	e58b3000 	str	r3, [r11]
    1230:	e320f000 	nop	{0}
    1234:	e59b6000 	ldr	r6, [r11]
    1238:	e3560000 	cmp	r6, #0
    123c:	1affffb5 	bne	1118 <__call_exitprocs+0x3c>
    1240:	eaffffe8 	b	11e8 <__call_exitprocs+0x10c>
    1244:	e1a0b006 	mov	r11, r6
    1248:	e1a06003 	mov	r6, r3
    124c:	eafffff9 	b	1238 <__call_exitprocs+0x15c>
    1250:	000013bc 	.word	0x000013bc
    1254:	00000000 	.word	0x00000000

00001258 <register_fini>:
    1258:	e92d4008 	push	{r3, lr}
    125c:	e59f3010 	ldr	r3, [pc, #16]	; 1274 <register_fini+0x1c>
    1260:	e3530000 	cmp	r3, #0
    1264:	159f000c 	ldrne	r0, [pc, #12]	; 1278 <register_fini+0x20>
    1268:	1bffff49 	blne	f94 <atexit>
    126c:	e8bd4008 	pop	{r3, lr}
    1270:	e12fff1e 	bx	lr
    1274:	000013e4 	.word	0x000013e4
    1278:	0000127c 	.word	0x0000127c

0000127c <__libc_fini_array>:
    127c:	e92d4038 	push	{r3, r4, r5, lr}
    1280:	e59f5030 	ldr	r5, [pc, #48]	; 12b8 <__libc_fini_array+0x3c>
    1284:	e59f4030 	ldr	r4, [pc, #48]	; 12bc <__libc_fini_array+0x40>
    1288:	e0654004 	rsb	r4, r5, r4
    128c:	e1b04144 	asrs	r4, r4, #2
    1290:	10855104 	addne	r5, r5, r4, lsl #2
    1294:	0a000004 	beq	12ac <__libc_fini_array+0x30>
    1298:	e5353004 	ldr	r3, [r5, #-4]!
    129c:	e1a0e00f 	mov	lr, pc
    12a0:	e12fff13 	bx	r3
    12a4:	e2544001 	subs	r4, r4, #1
    12a8:	1afffffa 	bne	1298 <__libc_fini_array+0x1c>
    12ac:	eb00004c 	bl	13e4 <__libc_fini>
    12b0:	e8bd4038 	pop	{r3, r4, r5, lr}
    12b4:	e12fff1e 	bx	lr
    12b8:	000013fc 	.word	0x000013fc
    12bc:	00001400 	.word	0x00001400

000012c0 <__cs3_premain>:
    12c0:	e92d4008 	push	{r3, lr}
    12c4:	eb000017 	bl	1328 <__libc_init_array>
    12c8:	e59f3030 	ldr	r3, [pc, #48]	; 1300 <__cs3_premain+0x40>
    12cc:	e3530000 	cmp	r3, #0
    12d0:	15930000 	ldrne	r0, [r3]
    12d4:	01a00003 	moveq	r0, r3
    12d8:	e59f3024 	ldr	r3, [pc, #36]	; 1304 <__cs3_premain+0x44>
    12dc:	e3530000 	cmp	r3, #0
    12e0:	15931000 	ldrne	r1, [r3]
    12e4:	01a01003 	moveq	r1, r3
    12e8:	e3a02000 	mov	r2, #0
    12ec:	ebfffbda 	bl	25c <main>
    12f0:	e59f3010 	ldr	r3, [pc, #16]	; 1308 <__cs3_premain+0x48>
    12f4:	e3530000 	cmp	r3, #0
    12f8:	1bffff2d 	blne	fb4 <exit>
    12fc:	eafffffe 	b	12fc <__cs3_premain+0x3c>
	...
    1308:	00000fb4 	.word	0x00000fb4

0000130c <_exit>:
    130c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    1310:	e3a00018 	mov	r0, #24
    1314:	e59f1004 	ldr	r1, [pc, #4]	; 1320 <_exit+0x14>
    1318:	ef123456 	svc	0x00123456
    131c:	eafffffe 	b	131c <_exit+0x10>
    1320:	00020026 	.word	0x00020026

00001324 <__cs3_isr_interrupt>:
    1324:	eafffffe 	b	1324 <__cs3_isr_interrupt>

00001328 <__libc_init_array>:
    1328:	e92d4070 	push	{r4, r5, r6, lr}
    132c:	e59f506c 	ldr	r5, [pc, #108]	; 13a0 <__libc_init_array+0x78>
    1330:	e59f606c 	ldr	r6, [pc, #108]	; 13a4 <__libc_init_array+0x7c>
    1334:	e0656006 	rsb	r6, r5, r6
    1338:	e1b06146 	asrs	r6, r6, #2
    133c:	12455004 	subne	r5, r5, #4
    1340:	13a04000 	movne	r4, #0
    1344:	0a000005 	beq	1360 <__libc_init_array+0x38>
    1348:	e5b53004 	ldr	r3, [r5, #4]!
    134c:	e2844001 	add	r4, r4, #1
    1350:	e1a0e00f 	mov	lr, pc
    1354:	e12fff13 	bx	r3
    1358:	e1560004 	cmp	r6, r4
    135c:	1afffff9 	bne	1348 <__libc_init_array+0x20>
    1360:	e59f5040 	ldr	r5, [pc, #64]	; 13a8 <__libc_init_array+0x80>
    1364:	e59f6040 	ldr	r6, [pc, #64]	; 13ac <__libc_init_array+0x84>
    1368:	e0656006 	rsb	r6, r5, r6
    136c:	eb000014 	bl	13c4 <_init>
    1370:	e1b06146 	asrs	r6, r6, #2
    1374:	12455004 	subne	r5, r5, #4
    1378:	13a04000 	movne	r4, #0
    137c:	0a000005 	beq	1398 <__libc_init_array+0x70>
    1380:	e5b53004 	ldr	r3, [r5, #4]!
    1384:	e2844001 	add	r4, r4, #1
    1388:	e1a0e00f 	mov	lr, pc
    138c:	e12fff13 	bx	r3
    1390:	e1560004 	cmp	r6, r4
    1394:	1afffff9 	bne	1380 <__libc_init_array+0x58>
    1398:	e8bd4070 	pop	{r4, r5, r6, lr}
    139c:	e12fff1e 	bx	lr
    13a0:	000013dc 	.word	0x000013dc
    13a4:	000013dc 	.word	0x000013dc
    13a8:	000013dc 	.word	0x000013dc
    13ac:	000013e4 	.word	0x000013e4

Disassembly of section .rodata:

000013b4 <_global_impure_ptr-0x8>:
    13b4:	00000049 	.word	0x00000049
    13b8:	000000c7 	.word	0x000000c7

000013bc <_global_impure_ptr>:
    13bc:	00001428 00000043                       (...C...

000013c4 <_init>:
    13c4:	e1a0c00d 	mov	r12, sp
    13c8:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
    13cc:	e24cb004 	sub	r11, r12, #4
    13d0:	e24bd028 	sub	sp, r11, #40	; 0x28
    13d4:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
    13d8:	e12fff1e 	bx	lr

000013dc <__init_array_start>:
    13dc:	00001258 	.word	0x00001258

000013e0 <__frame_dummy_init_array_entry>:
    13e0:	00000208                                ....

000013e4 <__libc_fini>:
    13e4:	e1a0c00d 	mov	r12, sp
    13e8:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
    13ec:	e24cb004 	sub	r11, r12, #4
    13f0:	e24bd028 	sub	sp, r11, #40	; 0x28
    13f4:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
    13f8:	e12fff1e 	bx	lr

000013fc <__fini_array_start>:
    13fc:	000001c4 	.word	0x000001c4

00001400 <__cs3_regions>:
    1400:	00000000 	.word	0x00000000
    1404:	00000040 	.word	0x00000040
    1408:	00000040 	.word	0x00000040
    140c:	00001818 	.word	0x00001818
    1410:	00000020 	.word	0x00000020

00001414 <__cs3_regions_end>:
    1414:	00000000 	.word	0x00000000
